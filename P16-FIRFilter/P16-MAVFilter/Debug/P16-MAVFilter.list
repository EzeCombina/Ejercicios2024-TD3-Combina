
P16-MAVFilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006394  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006520  08006520  00007520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006590  08006590  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006590  08006590  00007590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006598  08006598  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006598  08006598  00007598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800659c  0800659c  0000759c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080065a0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000800c  2**0
                  CONTENTS
 10 .bss          00000758  20000010  20000010  00008010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000768  20000768  00008010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013b7a  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003531  00000000  00000000  0001bbb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001178  00000000  00000000  0001f0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d4a  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002466d  00000000  00000000  00020faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000174d9  00000000  00000000  00045617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df584  00000000  00000000  0005caf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013c074  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000498c  00000000  00000000  0013c0b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  00140a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006504 	.word	0x08006504

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08006504 	.word	0x08006504

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_uldivmod>:
 80007d4:	b953      	cbnz	r3, 80007ec <__aeabi_uldivmod+0x18>
 80007d6:	b94a      	cbnz	r2, 80007ec <__aeabi_uldivmod+0x18>
 80007d8:	2900      	cmp	r1, #0
 80007da:	bf08      	it	eq
 80007dc:	2800      	cmpeq	r0, #0
 80007de:	bf1c      	itt	ne
 80007e0:	f04f 31ff 	movne.w	r1, #4294967295
 80007e4:	f04f 30ff 	movne.w	r0, #4294967295
 80007e8:	f000 b96a 	b.w	8000ac0 <__aeabi_idiv0>
 80007ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f4:	f000 f806 	bl	8000804 <__udivmoddi4>
 80007f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000800:	b004      	add	sp, #16
 8000802:	4770      	bx	lr

08000804 <__udivmoddi4>:
 8000804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000808:	9d08      	ldr	r5, [sp, #32]
 800080a:	460c      	mov	r4, r1
 800080c:	2b00      	cmp	r3, #0
 800080e:	d14e      	bne.n	80008ae <__udivmoddi4+0xaa>
 8000810:	4694      	mov	ip, r2
 8000812:	458c      	cmp	ip, r1
 8000814:	4686      	mov	lr, r0
 8000816:	fab2 f282 	clz	r2, r2
 800081a:	d962      	bls.n	80008e2 <__udivmoddi4+0xde>
 800081c:	b14a      	cbz	r2, 8000832 <__udivmoddi4+0x2e>
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	4091      	lsls	r1, r2
 8000824:	fa20 f303 	lsr.w	r3, r0, r3
 8000828:	fa0c fc02 	lsl.w	ip, ip, r2
 800082c:	4319      	orrs	r1, r3
 800082e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000832:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000836:	fa1f f68c 	uxth.w	r6, ip
 800083a:	fbb1 f4f7 	udiv	r4, r1, r7
 800083e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000842:	fb07 1114 	mls	r1, r7, r4, r1
 8000846:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800084a:	fb04 f106 	mul.w	r1, r4, r6
 800084e:	4299      	cmp	r1, r3
 8000850:	d90a      	bls.n	8000868 <__udivmoddi4+0x64>
 8000852:	eb1c 0303 	adds.w	r3, ip, r3
 8000856:	f104 30ff 	add.w	r0, r4, #4294967295
 800085a:	f080 8112 	bcs.w	8000a82 <__udivmoddi4+0x27e>
 800085e:	4299      	cmp	r1, r3
 8000860:	f240 810f 	bls.w	8000a82 <__udivmoddi4+0x27e>
 8000864:	3c02      	subs	r4, #2
 8000866:	4463      	add	r3, ip
 8000868:	1a59      	subs	r1, r3, r1
 800086a:	fa1f f38e 	uxth.w	r3, lr
 800086e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000872:	fb07 1110 	mls	r1, r7, r0, r1
 8000876:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800087a:	fb00 f606 	mul.w	r6, r0, r6
 800087e:	429e      	cmp	r6, r3
 8000880:	d90a      	bls.n	8000898 <__udivmoddi4+0x94>
 8000882:	eb1c 0303 	adds.w	r3, ip, r3
 8000886:	f100 31ff 	add.w	r1, r0, #4294967295
 800088a:	f080 80fc 	bcs.w	8000a86 <__udivmoddi4+0x282>
 800088e:	429e      	cmp	r6, r3
 8000890:	f240 80f9 	bls.w	8000a86 <__udivmoddi4+0x282>
 8000894:	4463      	add	r3, ip
 8000896:	3802      	subs	r0, #2
 8000898:	1b9b      	subs	r3, r3, r6
 800089a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800089e:	2100      	movs	r1, #0
 80008a0:	b11d      	cbz	r5, 80008aa <__udivmoddi4+0xa6>
 80008a2:	40d3      	lsrs	r3, r2
 80008a4:	2200      	movs	r2, #0
 80008a6:	e9c5 3200 	strd	r3, r2, [r5]
 80008aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ae:	428b      	cmp	r3, r1
 80008b0:	d905      	bls.n	80008be <__udivmoddi4+0xba>
 80008b2:	b10d      	cbz	r5, 80008b8 <__udivmoddi4+0xb4>
 80008b4:	e9c5 0100 	strd	r0, r1, [r5]
 80008b8:	2100      	movs	r1, #0
 80008ba:	4608      	mov	r0, r1
 80008bc:	e7f5      	b.n	80008aa <__udivmoddi4+0xa6>
 80008be:	fab3 f183 	clz	r1, r3
 80008c2:	2900      	cmp	r1, #0
 80008c4:	d146      	bne.n	8000954 <__udivmoddi4+0x150>
 80008c6:	42a3      	cmp	r3, r4
 80008c8:	d302      	bcc.n	80008d0 <__udivmoddi4+0xcc>
 80008ca:	4290      	cmp	r0, r2
 80008cc:	f0c0 80f0 	bcc.w	8000ab0 <__udivmoddi4+0x2ac>
 80008d0:	1a86      	subs	r6, r0, r2
 80008d2:	eb64 0303 	sbc.w	r3, r4, r3
 80008d6:	2001      	movs	r0, #1
 80008d8:	2d00      	cmp	r5, #0
 80008da:	d0e6      	beq.n	80008aa <__udivmoddi4+0xa6>
 80008dc:	e9c5 6300 	strd	r6, r3, [r5]
 80008e0:	e7e3      	b.n	80008aa <__udivmoddi4+0xa6>
 80008e2:	2a00      	cmp	r2, #0
 80008e4:	f040 8090 	bne.w	8000a08 <__udivmoddi4+0x204>
 80008e8:	eba1 040c 	sub.w	r4, r1, ip
 80008ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008f0:	fa1f f78c 	uxth.w	r7, ip
 80008f4:	2101      	movs	r1, #1
 80008f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80008fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000902:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000906:	fb07 f006 	mul.w	r0, r7, r6
 800090a:	4298      	cmp	r0, r3
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0x11c>
 800090e:	eb1c 0303 	adds.w	r3, ip, r3
 8000912:	f106 34ff 	add.w	r4, r6, #4294967295
 8000916:	d202      	bcs.n	800091e <__udivmoddi4+0x11a>
 8000918:	4298      	cmp	r0, r3
 800091a:	f200 80cd 	bhi.w	8000ab8 <__udivmoddi4+0x2b4>
 800091e:	4626      	mov	r6, r4
 8000920:	1a1c      	subs	r4, r3, r0
 8000922:	fa1f f38e 	uxth.w	r3, lr
 8000926:	fbb4 f0f8 	udiv	r0, r4, r8
 800092a:	fb08 4410 	mls	r4, r8, r0, r4
 800092e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000932:	fb00 f707 	mul.w	r7, r0, r7
 8000936:	429f      	cmp	r7, r3
 8000938:	d908      	bls.n	800094c <__udivmoddi4+0x148>
 800093a:	eb1c 0303 	adds.w	r3, ip, r3
 800093e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000942:	d202      	bcs.n	800094a <__udivmoddi4+0x146>
 8000944:	429f      	cmp	r7, r3
 8000946:	f200 80b0 	bhi.w	8000aaa <__udivmoddi4+0x2a6>
 800094a:	4620      	mov	r0, r4
 800094c:	1bdb      	subs	r3, r3, r7
 800094e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000952:	e7a5      	b.n	80008a0 <__udivmoddi4+0x9c>
 8000954:	f1c1 0620 	rsb	r6, r1, #32
 8000958:	408b      	lsls	r3, r1
 800095a:	fa22 f706 	lsr.w	r7, r2, r6
 800095e:	431f      	orrs	r7, r3
 8000960:	fa20 fc06 	lsr.w	ip, r0, r6
 8000964:	fa04 f301 	lsl.w	r3, r4, r1
 8000968:	ea43 030c 	orr.w	r3, r3, ip
 800096c:	40f4      	lsrs	r4, r6
 800096e:	fa00 f801 	lsl.w	r8, r0, r1
 8000972:	0c38      	lsrs	r0, r7, #16
 8000974:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000978:	fbb4 fef0 	udiv	lr, r4, r0
 800097c:	fa1f fc87 	uxth.w	ip, r7
 8000980:	fb00 441e 	mls	r4, r0, lr, r4
 8000984:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000988:	fb0e f90c 	mul.w	r9, lr, ip
 800098c:	45a1      	cmp	r9, r4
 800098e:	fa02 f201 	lsl.w	r2, r2, r1
 8000992:	d90a      	bls.n	80009aa <__udivmoddi4+0x1a6>
 8000994:	193c      	adds	r4, r7, r4
 8000996:	f10e 3aff 	add.w	sl, lr, #4294967295
 800099a:	f080 8084 	bcs.w	8000aa6 <__udivmoddi4+0x2a2>
 800099e:	45a1      	cmp	r9, r4
 80009a0:	f240 8081 	bls.w	8000aa6 <__udivmoddi4+0x2a2>
 80009a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80009a8:	443c      	add	r4, r7
 80009aa:	eba4 0409 	sub.w	r4, r4, r9
 80009ae:	fa1f f983 	uxth.w	r9, r3
 80009b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80009b6:	fb00 4413 	mls	r4, r0, r3, r4
 80009ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009be:	fb03 fc0c 	mul.w	ip, r3, ip
 80009c2:	45a4      	cmp	ip, r4
 80009c4:	d907      	bls.n	80009d6 <__udivmoddi4+0x1d2>
 80009c6:	193c      	adds	r4, r7, r4
 80009c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80009cc:	d267      	bcs.n	8000a9e <__udivmoddi4+0x29a>
 80009ce:	45a4      	cmp	ip, r4
 80009d0:	d965      	bls.n	8000a9e <__udivmoddi4+0x29a>
 80009d2:	3b02      	subs	r3, #2
 80009d4:	443c      	add	r4, r7
 80009d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009da:	fba0 9302 	umull	r9, r3, r0, r2
 80009de:	eba4 040c 	sub.w	r4, r4, ip
 80009e2:	429c      	cmp	r4, r3
 80009e4:	46ce      	mov	lr, r9
 80009e6:	469c      	mov	ip, r3
 80009e8:	d351      	bcc.n	8000a8e <__udivmoddi4+0x28a>
 80009ea:	d04e      	beq.n	8000a8a <__udivmoddi4+0x286>
 80009ec:	b155      	cbz	r5, 8000a04 <__udivmoddi4+0x200>
 80009ee:	ebb8 030e 	subs.w	r3, r8, lr
 80009f2:	eb64 040c 	sbc.w	r4, r4, ip
 80009f6:	fa04 f606 	lsl.w	r6, r4, r6
 80009fa:	40cb      	lsrs	r3, r1
 80009fc:	431e      	orrs	r6, r3
 80009fe:	40cc      	lsrs	r4, r1
 8000a00:	e9c5 6400 	strd	r6, r4, [r5]
 8000a04:	2100      	movs	r1, #0
 8000a06:	e750      	b.n	80008aa <__udivmoddi4+0xa6>
 8000a08:	f1c2 0320 	rsb	r3, r2, #32
 8000a0c:	fa20 f103 	lsr.w	r1, r0, r3
 8000a10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a14:	fa24 f303 	lsr.w	r3, r4, r3
 8000a18:	4094      	lsls	r4, r2
 8000a1a:	430c      	orrs	r4, r1
 8000a1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a20:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a24:	fa1f f78c 	uxth.w	r7, ip
 8000a28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a2c:	fb08 3110 	mls	r1, r8, r0, r3
 8000a30:	0c23      	lsrs	r3, r4, #16
 8000a32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a36:	fb00 f107 	mul.w	r1, r0, r7
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	d908      	bls.n	8000a50 <__udivmoddi4+0x24c>
 8000a3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a42:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a46:	d22c      	bcs.n	8000aa2 <__udivmoddi4+0x29e>
 8000a48:	4299      	cmp	r1, r3
 8000a4a:	d92a      	bls.n	8000aa2 <__udivmoddi4+0x29e>
 8000a4c:	3802      	subs	r0, #2
 8000a4e:	4463      	add	r3, ip
 8000a50:	1a5b      	subs	r3, r3, r1
 8000a52:	b2a4      	uxth	r4, r4
 8000a54:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a58:	fb08 3311 	mls	r3, r8, r1, r3
 8000a5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a60:	fb01 f307 	mul.w	r3, r1, r7
 8000a64:	42a3      	cmp	r3, r4
 8000a66:	d908      	bls.n	8000a7a <__udivmoddi4+0x276>
 8000a68:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a70:	d213      	bcs.n	8000a9a <__udivmoddi4+0x296>
 8000a72:	42a3      	cmp	r3, r4
 8000a74:	d911      	bls.n	8000a9a <__udivmoddi4+0x296>
 8000a76:	3902      	subs	r1, #2
 8000a78:	4464      	add	r4, ip
 8000a7a:	1ae4      	subs	r4, r4, r3
 8000a7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a80:	e739      	b.n	80008f6 <__udivmoddi4+0xf2>
 8000a82:	4604      	mov	r4, r0
 8000a84:	e6f0      	b.n	8000868 <__udivmoddi4+0x64>
 8000a86:	4608      	mov	r0, r1
 8000a88:	e706      	b.n	8000898 <__udivmoddi4+0x94>
 8000a8a:	45c8      	cmp	r8, r9
 8000a8c:	d2ae      	bcs.n	80009ec <__udivmoddi4+0x1e8>
 8000a8e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a92:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a96:	3801      	subs	r0, #1
 8000a98:	e7a8      	b.n	80009ec <__udivmoddi4+0x1e8>
 8000a9a:	4631      	mov	r1, r6
 8000a9c:	e7ed      	b.n	8000a7a <__udivmoddi4+0x276>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	e799      	b.n	80009d6 <__udivmoddi4+0x1d2>
 8000aa2:	4630      	mov	r0, r6
 8000aa4:	e7d4      	b.n	8000a50 <__udivmoddi4+0x24c>
 8000aa6:	46d6      	mov	lr, sl
 8000aa8:	e77f      	b.n	80009aa <__udivmoddi4+0x1a6>
 8000aaa:	4463      	add	r3, ip
 8000aac:	3802      	subs	r0, #2
 8000aae:	e74d      	b.n	800094c <__udivmoddi4+0x148>
 8000ab0:	4606      	mov	r6, r0
 8000ab2:	4623      	mov	r3, r4
 8000ab4:	4608      	mov	r0, r1
 8000ab6:	e70f      	b.n	80008d8 <__udivmoddi4+0xd4>
 8000ab8:	3e02      	subs	r6, #2
 8000aba:	4463      	add	r3, ip
 8000abc:	e730      	b.n	8000920 <__udivmoddi4+0x11c>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_idiv0>:
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aca:	463b      	mov	r3, r7
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ad6:	4b22      	ldr	r3, [pc, #136]	@ (8000b60 <MX_ADC1_Init+0x9c>)
 8000ad8:	4a22      	ldr	r2, [pc, #136]	@ (8000b64 <MX_ADC1_Init+0xa0>)
 8000ada:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000adc:	4b20      	ldr	r3, [pc, #128]	@ (8000b60 <MX_ADC1_Init+0x9c>)
 8000ade:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ae2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b60 <MX_ADC1_Init+0x9c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000aea:	4b1d      	ldr	r3, [pc, #116]	@ (8000b60 <MX_ADC1_Init+0x9c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b60 <MX_ADC1_Init+0x9c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	@ (8000b60 <MX_ADC1_Init+0x9c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000afe:	4b18      	ldr	r3, [pc, #96]	@ (8000b60 <MX_ADC1_Init+0x9c>)
 8000b00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000b04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000b06:	4b16      	ldr	r3, [pc, #88]	@ (8000b60 <MX_ADC1_Init+0x9c>)
 8000b08:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000b0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b0e:	4b14      	ldr	r3, [pc, #80]	@ (8000b60 <MX_ADC1_Init+0x9c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b14:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <MX_ADC1_Init+0x9c>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b1a:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <MX_ADC1_Init+0x9c>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b22:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <MX_ADC1_Init+0x9c>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b28:	480d      	ldr	r0, [pc, #52]	@ (8000b60 <MX_ADC1_Init+0x9c>)
 8000b2a:	f000 fdb1 	bl	8001690 <HAL_ADC_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000b34:	f000 fc00 	bl	8001338 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b40:	2300      	movs	r3, #0
 8000b42:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b44:	463b      	mov	r3, r7
 8000b46:	4619      	mov	r1, r3
 8000b48:	4805      	ldr	r0, [pc, #20]	@ (8000b60 <MX_ADC1_Init+0x9c>)
 8000b4a:	f000 feff 	bl	800194c <HAL_ADC_ConfigChannel>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000b54:	f000 fbf0 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	2000002c 	.word	0x2000002c
 8000b64:	40012000 	.word	0x40012000

08000b68 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	@ 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a33      	ldr	r2, [pc, #204]	@ (8000c54 <HAL_ADC_MspInit+0xec>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d160      	bne.n	8000c4c <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	4b32      	ldr	r3, [pc, #200]	@ (8000c58 <HAL_ADC_MspInit+0xf0>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b92:	4a31      	ldr	r2, [pc, #196]	@ (8000c58 <HAL_ADC_MspInit+0xf0>)
 8000b94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8000c58 <HAL_ADC_MspInit+0xf0>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b2b      	ldr	r3, [pc, #172]	@ (8000c58 <HAL_ADC_MspInit+0xf0>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	4a2a      	ldr	r2, [pc, #168]	@ (8000c58 <HAL_ADC_MspInit+0xf0>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb6:	4b28      	ldr	r3, [pc, #160]	@ (8000c58 <HAL_ADC_MspInit+0xf0>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4821      	ldr	r0, [pc, #132]	@ (8000c5c <HAL_ADC_MspInit+0xf4>)
 8000bd6:	f001 ffc1 	bl	8002b5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000bda:	4b21      	ldr	r3, [pc, #132]	@ (8000c60 <HAL_ADC_MspInit+0xf8>)
 8000bdc:	4a21      	ldr	r2, [pc, #132]	@ (8000c64 <HAL_ADC_MspInit+0xfc>)
 8000bde:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000be0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c60 <HAL_ADC_MspInit+0xf8>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000be6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c60 <HAL_ADC_MspInit+0xf8>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bec:	4b1c      	ldr	r3, [pc, #112]	@ (8000c60 <HAL_ADC_MspInit+0xf8>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c60 <HAL_ADC_MspInit+0xf8>)
 8000bf4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bf8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bfa:	4b19      	ldr	r3, [pc, #100]	@ (8000c60 <HAL_ADC_MspInit+0xf8>)
 8000bfc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c00:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c02:	4b17      	ldr	r3, [pc, #92]	@ (8000c60 <HAL_ADC_MspInit+0xf8>)
 8000c04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c08:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c0a:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <HAL_ADC_MspInit+0xf8>)
 8000c0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c10:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c12:	4b13      	ldr	r3, [pc, #76]	@ (8000c60 <HAL_ADC_MspInit+0xf8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c18:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <HAL_ADC_MspInit+0xf8>)
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c1e:	4b10      	ldr	r3, [pc, #64]	@ (8000c60 <HAL_ADC_MspInit+0xf8>)
 8000c20:	2203      	movs	r2, #3
 8000c22:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000c24:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <HAL_ADC_MspInit+0xf8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c60 <HAL_ADC_MspInit+0xf8>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c30:	480b      	ldr	r0, [pc, #44]	@ (8000c60 <HAL_ADC_MspInit+0xf8>)
 8000c32:	f001 fc23 	bl	800247c <HAL_DMA_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 8000c3c:	f000 fb7c 	bl	8001338 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a07      	ldr	r2, [pc, #28]	@ (8000c60 <HAL_ADC_MspInit+0xf8>)
 8000c44:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c46:	4a06      	ldr	r2, [pc, #24]	@ (8000c60 <HAL_ADC_MspInit+0xf8>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c4c:	bf00      	nop
 8000c4e:	3728      	adds	r7, #40	@ 0x28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40012000 	.word	0x40012000
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020000 	.word	0x40020000
 8000c60:	20000074 	.word	0x20000074
 8000c64:	40026410 	.word	0x40026410

08000c68 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c6e:	463b      	mov	r3, r7
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000c76:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <MX_DAC_Init+0x4c>)
 8000c78:	4a0f      	ldr	r2, [pc, #60]	@ (8000cb8 <MX_DAC_Init+0x50>)
 8000c7a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000c7c:	480d      	ldr	r0, [pc, #52]	@ (8000cb4 <MX_DAC_Init+0x4c>)
 8000c7e:	f001 fa16 	bl	80020ae <HAL_DAC_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000c88:	f000 fb56 	bl	8001338 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8000c8c:	230c      	movs	r3, #12
 8000c8e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c94:	463b      	mov	r3, r7
 8000c96:	2200      	movs	r2, #0
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4806      	ldr	r0, [pc, #24]	@ (8000cb4 <MX_DAC_Init+0x4c>)
 8000c9c:	f001 fb0a 	bl	80022b4 <HAL_DAC_ConfigChannel>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000ca6:	f000 fb47 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200000d4 	.word	0x200000d4
 8000cb8:	40007400 	.word	0x40007400

08000cbc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	@ 0x28
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a34      	ldr	r2, [pc, #208]	@ (8000dac <HAL_DAC_MspInit+0xf0>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d161      	bne.n	8000da2 <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	4b33      	ldr	r3, [pc, #204]	@ (8000db0 <HAL_DAC_MspInit+0xf4>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce6:	4a32      	ldr	r2, [pc, #200]	@ (8000db0 <HAL_DAC_MspInit+0xf4>)
 8000ce8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000cec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cee:	4b30      	ldr	r3, [pc, #192]	@ (8000db0 <HAL_DAC_MspInit+0xf4>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b2c      	ldr	r3, [pc, #176]	@ (8000db0 <HAL_DAC_MspInit+0xf4>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	4a2b      	ldr	r2, [pc, #172]	@ (8000db0 <HAL_DAC_MspInit+0xf4>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0a:	4b29      	ldr	r3, [pc, #164]	@ (8000db0 <HAL_DAC_MspInit+0xf4>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d16:	2310      	movs	r3, #16
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	4822      	ldr	r0, [pc, #136]	@ (8000db4 <HAL_DAC_MspInit+0xf8>)
 8000d2a:	f001 ff17 	bl	8002b5c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8000d2e:	4b22      	ldr	r3, [pc, #136]	@ (8000db8 <HAL_DAC_MspInit+0xfc>)
 8000d30:	4a22      	ldr	r2, [pc, #136]	@ (8000dbc <HAL_DAC_MspInit+0x100>)
 8000d32:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000d34:	4b20      	ldr	r3, [pc, #128]	@ (8000db8 <HAL_DAC_MspInit+0xfc>)
 8000d36:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000d3a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000db8 <HAL_DAC_MspInit+0xfc>)
 8000d3e:	2240      	movs	r2, #64	@ 0x40
 8000d40:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d42:	4b1d      	ldr	r3, [pc, #116]	@ (8000db8 <HAL_DAC_MspInit+0xfc>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000d48:	4b1b      	ldr	r3, [pc, #108]	@ (8000db8 <HAL_DAC_MspInit+0xfc>)
 8000d4a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d4e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d50:	4b19      	ldr	r3, [pc, #100]	@ (8000db8 <HAL_DAC_MspInit+0xfc>)
 8000d52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d56:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d58:	4b17      	ldr	r3, [pc, #92]	@ (8000db8 <HAL_DAC_MspInit+0xfc>)
 8000d5a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d5e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8000d60:	4b15      	ldr	r3, [pc, #84]	@ (8000db8 <HAL_DAC_MspInit+0xfc>)
 8000d62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d66:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8000d68:	4b13      	ldr	r3, [pc, #76]	@ (8000db8 <HAL_DAC_MspInit+0xfc>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000d6e:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <HAL_DAC_MspInit+0xfc>)
 8000d70:	2204      	movs	r2, #4
 8000d72:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000d74:	4b10      	ldr	r3, [pc, #64]	@ (8000db8 <HAL_DAC_MspInit+0xfc>)
 8000d76:	2203      	movs	r2, #3
 8000d78:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dac1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000db8 <HAL_DAC_MspInit+0xfc>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dac1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000d80:	4b0d      	ldr	r3, [pc, #52]	@ (8000db8 <HAL_DAC_MspInit+0xfc>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8000d86:	480c      	ldr	r0, [pc, #48]	@ (8000db8 <HAL_DAC_MspInit+0xfc>)
 8000d88:	f001 fb78 	bl	800247c <HAL_DMA_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_DAC_MspInit+0xda>
    {
      Error_Handler();
 8000d92:	f000 fad1 	bl	8001338 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a07      	ldr	r2, [pc, #28]	@ (8000db8 <HAL_DAC_MspInit+0xfc>)
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	4a06      	ldr	r2, [pc, #24]	@ (8000db8 <HAL_DAC_MspInit+0xfc>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000da2:	bf00      	nop
 8000da4:	3728      	adds	r7, #40	@ 0x28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40007400 	.word	0x40007400
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020000 	.word	0x40020000
 8000db8:	200000e8 	.word	0x200000e8
 8000dbc:	40026088 	.word	0x40026088

08000dc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	4b17      	ldr	r3, [pc, #92]	@ (8000e28 <MX_DMA_Init+0x68>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	4a16      	ldr	r2, [pc, #88]	@ (8000e28 <MX_DMA_Init+0x68>)
 8000dd0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd6:	4b14      	ldr	r3, [pc, #80]	@ (8000e28 <MX_DMA_Init+0x68>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	603b      	str	r3, [r7, #0]
 8000de6:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <MX_DMA_Init+0x68>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	4a0f      	ldr	r2, [pc, #60]	@ (8000e28 <MX_DMA_Init+0x68>)
 8000dec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df2:	4b0d      	ldr	r3, [pc, #52]	@ (8000e28 <MX_DMA_Init+0x68>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2100      	movs	r1, #0
 8000e02:	2010      	movs	r0, #16
 8000e04:	f001 f91d 	bl	8002042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e08:	2010      	movs	r0, #16
 8000e0a:	f001 f936 	bl	800207a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	2038      	movs	r0, #56	@ 0x38
 8000e14:	f001 f915 	bl	8002042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e18:	2038      	movs	r0, #56	@ 0x38
 8000e1a:	f001 f92e 	bl	800207a <HAL_NVIC_EnableIRQ>

}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023800 	.word	0x40023800

08000e2c <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08c      	sub	sp, #48	@ 0x30
 8000e30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]
 8000e40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]
 8000e46:	4b6b      	ldr	r3, [pc, #428]	@ (8000ff4 <MX_GPIO_Init+0x1c8>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	4a6a      	ldr	r2, [pc, #424]	@ (8000ff4 <MX_GPIO_Init+0x1c8>)
 8000e4c:	f043 0310 	orr.w	r3, r3, #16
 8000e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e52:	4b68      	ldr	r3, [pc, #416]	@ (8000ff4 <MX_GPIO_Init+0x1c8>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	f003 0310 	and.w	r3, r3, #16
 8000e5a:	61bb      	str	r3, [r7, #24]
 8000e5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	4b64      	ldr	r3, [pc, #400]	@ (8000ff4 <MX_GPIO_Init+0x1c8>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4a63      	ldr	r2, [pc, #396]	@ (8000ff4 <MX_GPIO_Init+0x1c8>)
 8000e68:	f043 0304 	orr.w	r3, r3, #4
 8000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6e:	4b61      	ldr	r3, [pc, #388]	@ (8000ff4 <MX_GPIO_Init+0x1c8>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	4b5d      	ldr	r3, [pc, #372]	@ (8000ff4 <MX_GPIO_Init+0x1c8>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	4a5c      	ldr	r2, [pc, #368]	@ (8000ff4 <MX_GPIO_Init+0x1c8>)
 8000e84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8a:	4b5a      	ldr	r3, [pc, #360]	@ (8000ff4 <MX_GPIO_Init+0x1c8>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b56      	ldr	r3, [pc, #344]	@ (8000ff4 <MX_GPIO_Init+0x1c8>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	4a55      	ldr	r2, [pc, #340]	@ (8000ff4 <MX_GPIO_Init+0x1c8>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea6:	4b53      	ldr	r3, [pc, #332]	@ (8000ff4 <MX_GPIO_Init+0x1c8>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	4b4f      	ldr	r3, [pc, #316]	@ (8000ff4 <MX_GPIO_Init+0x1c8>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	4a4e      	ldr	r2, [pc, #312]	@ (8000ff4 <MX_GPIO_Init+0x1c8>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec2:	4b4c      	ldr	r3, [pc, #304]	@ (8000ff4 <MX_GPIO_Init+0x1c8>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	4b48      	ldr	r3, [pc, #288]	@ (8000ff4 <MX_GPIO_Init+0x1c8>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	4a47      	ldr	r2, [pc, #284]	@ (8000ff4 <MX_GPIO_Init+0x1c8>)
 8000ed8:	f043 0308 	orr.w	r3, r3, #8
 8000edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ede:	4b45      	ldr	r3, [pc, #276]	@ (8000ff4 <MX_GPIO_Init+0x1c8>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	f003 0308 	and.w	r3, r3, #8
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2108      	movs	r1, #8
 8000eee:	4842      	ldr	r0, [pc, #264]	@ (8000ff8 <MX_GPIO_Init+0x1cc>)
 8000ef0:	f001 ffd0 	bl	8002e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	4840      	ldr	r0, [pc, #256]	@ (8000ffc <MX_GPIO_Init+0x1d0>)
 8000efa:	f001 ffcb 	bl	8002e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000efe:	2200      	movs	r2, #0
 8000f00:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000f04:	483e      	ldr	r0, [pc, #248]	@ (8001000 <MX_GPIO_Init+0x1d4>)
 8000f06:	f001 ffc5 	bl	8002e94 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000f0a:	2308      	movs	r3, #8
 8000f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4835      	ldr	r0, [pc, #212]	@ (8000ff8 <MX_GPIO_Init+0x1cc>)
 8000f22:	f001 fe1b 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f26:	2301      	movs	r3, #1
 8000f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	482f      	ldr	r0, [pc, #188]	@ (8000ffc <MX_GPIO_Init+0x1d0>)
 8000f3e:	f001 fe0d 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000f42:	2308      	movs	r3, #8
 8000f44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f52:	2305      	movs	r3, #5
 8000f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4827      	ldr	r0, [pc, #156]	@ (8000ffc <MX_GPIO_Init+0x1d0>)
 8000f5e:	f001 fdfd 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000f62:	2304      	movs	r3, #4
 8000f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f66:	2300      	movs	r3, #0
 8000f68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	f107 031c 	add.w	r3, r7, #28
 8000f72:	4619      	mov	r1, r3
 8000f74:	4823      	ldr	r0, [pc, #140]	@ (8001004 <MX_GPIO_Init+0x1d8>)
 8000f76:	f001 fdf1 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000f7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f8c:	2305      	movs	r3, #5
 8000f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000f90:	f107 031c 	add.w	r3, r7, #28
 8000f94:	4619      	mov	r1, r3
 8000f96:	481b      	ldr	r0, [pc, #108]	@ (8001004 <MX_GPIO_Init+0x1d8>)
 8000f98:	f001 fde0 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000f9c:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000fa0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4812      	ldr	r0, [pc, #72]	@ (8001000 <MX_GPIO_Init+0x1d4>)
 8000fb6:	f001 fdd1 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000fba:	2320      	movs	r3, #32
 8000fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f107 031c 	add.w	r3, r7, #28
 8000fca:	4619      	mov	r1, r3
 8000fcc:	480c      	ldr	r0, [pc, #48]	@ (8001000 <MX_GPIO_Init+0x1d4>)
 8000fce:	f001 fdc5 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fd6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000fda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4804      	ldr	r0, [pc, #16]	@ (8000ff8 <MX_GPIO_Init+0x1cc>)
 8000fe8:	f001 fdb8 	bl	8002b5c <HAL_GPIO_Init>

}
 8000fec:	bf00      	nop
 8000fee:	3730      	adds	r7, #48	@ 0x30
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40020800 	.word	0x40020800
 8001000:	40020c00 	.word	0x40020c00
 8001004:	40020400 	.word	0x40020400

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af02      	add	r7, sp, #8
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800100e:	f000 facd 	bl	80015ac <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8001012:	f000 f927 	bl	8001264 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001016:	f7ff ff09 	bl	8000e2c <MX_GPIO_Init>
	MX_DMA_Init();
 800101a:	f7ff fed1 	bl	8000dc0 <MX_DMA_Init>
	MX_ADC1_Init();
 800101e:	f7ff fd51 	bl	8000ac4 <MX_ADC1_Init>
	MX_DAC_Init();
 8001022:	f7ff fe21 	bl	8000c68 <MX_DAC_Init>
	MX_TIM8_Init();
 8001026:	f000 fa1f 	bl	8001468 <MX_TIM8_Init>

	HAL_TIM_Base_Start(&htim8);
 800102a:	481d      	ldr	r0, [pc, #116]	@ (80010a0 <main+0x98>)
 800102c:	f004 f9c0 	bl	80053b0 <HAL_TIM_Base_Start>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_val, FULLBUFFERSIZE);
 8001030:	2264      	movs	r2, #100	@ 0x64
 8001032:	491c      	ldr	r1, [pc, #112]	@ (80010a4 <main+0x9c>)
 8001034:	481c      	ldr	r0, [pc, #112]	@ (80010a8 <main+0xa0>)
 8001036:	f000 fb6f 	bl	8001718 <HAL_ADC_Start_DMA>

	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1,(uint32_t*) dac_val, FULLBUFFERSIZE, DAC_ALIGN_12B_R);
 800103a:	2300      	movs	r3, #0
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2364      	movs	r3, #100	@ 0x64
 8001040:	4a1a      	ldr	r2, [pc, #104]	@ (80010ac <main+0xa4>)
 8001042:	2100      	movs	r1, #0
 8001044:	481a      	ldr	r0, [pc, #104]	@ (80010b0 <main+0xa8>)
 8001046:	f001 f855 	bl	80020f4 <HAL_DAC_Start_DMA>

	/* Infinite loop */

	for(int j = 0; j < (MUESTRASMAX - 1); j++)
 800104a:	2300      	movs	r3, #0
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	e00c      	b.n	800106a <main+0x62>
	{
		muestrasPtr[j] = 0;
 8001050:	4a18      	ldr	r2, [pc, #96]	@ (80010b4 <main+0xac>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	18d1      	adds	r1, r2, r3
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	f04f 0300 	mov.w	r3, #0
 8001060:	e9c1 2300 	strd	r2, r3, [r1]
	for(int j = 0; j < (MUESTRASMAX - 1); j++)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3301      	adds	r3, #1
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b09      	cmp	r3, #9
 800106e:	ddef      	ble.n	8001050 <main+0x48>
	}

	while (1)
	{
		if (flagProcess == 1) //Si hay datos para procesar, ingresa
 8001070:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <main+0xb0>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b01      	cmp	r3, #1
 8001078:	d1fa      	bne.n	8001070 <main+0x68>
		{
			HAL_GPIO_WritePin(GPIOD, LD4_Pin,1); //PD12, para medir tiempo de ejecución
 800107a:	2201      	movs	r2, #1
 800107c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001080:	480e      	ldr	r0, [pc, #56]	@ (80010bc <main+0xb4>)
 8001082:	f001 ff07 	bl	8002e94 <HAL_GPIO_WritePin>
			ProcessDSP();
 8001086:	f000 f81b 	bl	80010c0 <ProcessDSP>
			HAL_GPIO_WritePin(GPIOD, LD4_Pin,0);
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001090:	480a      	ldr	r0, [pc, #40]	@ (80010bc <main+0xb4>)
 8001092:	f001 feff 	bl	8002e94 <HAL_GPIO_WritePin>
			flagProcess = 0; // Limpiamos bandera
 8001096:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <main+0xb0>)
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
		if (flagProcess == 1) //Si hay datos para procesar, ingresa
 800109c:	e7e8      	b.n	8001070 <main+0x68>
 800109e:	bf00      	nop
 80010a0:	2000033c 	.word	0x2000033c
 80010a4:	20000148 	.word	0x20000148
 80010a8:	2000002c 	.word	0x2000002c
 80010ac:	20000210 	.word	0x20000210
 80010b0:	200000d4 	.word	0x200000d4
 80010b4:	200002e0 	.word	0x200002e0
 80010b8:	20000338 	.word	0x20000338
 80010bc:	40020c00 	.word	0x40020c00

080010c0 <ProcessDSP>:
/**
 * Función para el procesamiento DSP. La duración de esta función debe ser menor
 * al tiempo que demora completarse mitad del buffer DMA
 */
void ProcessDSP()
{
 80010c0:	b5b0      	push	{r4, r5, r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
	//Copiamos los datos del ADC al DAC sin procesar
	//(la mitad del buffer ya convertido)
	//En este punto se puede aplicar las operaciones o filtros deseados

	// FILTRO DE 10 MUESTRAS
	for(int n = 0; n < HALFBUFFERSIZE; n++)
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	e074      	b.n	80011b6 <ProcessDSP+0xf6>
	{
		Valor = coefPtr[0]*(double)adcBufPtr[n];
 80010cc:	a543      	add	r5, pc, #268	@ (adr r5, 80011dc <ProcessDSP+0x11c>)
 80010ce:	e9d5 4500 	ldrd	r4, r5, [r5]
 80010d2:	4b3d      	ldr	r3, [pc, #244]	@ (80011c8 <ProcessDSP+0x108>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	4413      	add	r3, r2
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fadd 	bl	80006a0 <__aeabi_ui2d>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4620      	mov	r0, r4
 80010ec:	4629      	mov	r1, r5
 80010ee:	f7ff f86b 	bl	80001c8 <__aeabi_dmul>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4935      	ldr	r1, [pc, #212]	@ (80011cc <ProcessDSP+0x10c>)
 80010f8:	e9c1 2300 	strd	r2, r3, [r1]
		for(int h = 0; h < MUESTRASMAX - 1; h++)
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	e01f      	b.n	8001142 <ProcessDSP+0x82>
		{
			Valor += coefPtr[h+1]*muestrasPtr[h];
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	3301      	adds	r3, #1
 8001106:	4a32      	ldr	r2, [pc, #200]	@ (80011d0 <ProcessDSP+0x110>)
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	4413      	add	r3, r2
 800110c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001110:	4a30      	ldr	r2, [pc, #192]	@ (80011d4 <ProcessDSP+0x114>)
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	4413      	add	r3, r2
 8001118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111c:	f7ff f854 	bl	80001c8 <__aeabi_dmul>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	4b28      	ldr	r3, [pc, #160]	@ (80011cc <ProcessDSP+0x10c>)
 800112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112e:	f7ff f97b 	bl	8000428 <__adddf3>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4925      	ldr	r1, [pc, #148]	@ (80011cc <ProcessDSP+0x10c>)
 8001138:	e9c1 2300 	strd	r2, r3, [r1]
		for(int h = 0; h < MUESTRASMAX - 1; h++)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	3301      	adds	r3, #1
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	2b09      	cmp	r3, #9
 8001146:	dddc      	ble.n	8001102 <ProcessDSP+0x42>
		}

		for(int i = MUESTRASMAX - 1; i >= MUESTRASMAX - (MUESTRASMAX - 1); i--)
 8001148:	230a      	movs	r3, #10
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	e00f      	b.n	800116e <ProcessDSP+0xae>
		{
			muestrasPtr[i] = muestrasPtr[i-1];
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3b01      	subs	r3, #1
 8001152:	4a20      	ldr	r2, [pc, #128]	@ (80011d4 <ProcessDSP+0x114>)
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	4413      	add	r3, r2
 8001158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115c:	481d      	ldr	r0, [pc, #116]	@ (80011d4 <ProcessDSP+0x114>)
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	00c9      	lsls	r1, r1, #3
 8001162:	4401      	add	r1, r0
 8001164:	e9c1 2300 	strd	r2, r3, [r1]
		for(int i = MUESTRASMAX - 1; i >= MUESTRASMAX - (MUESTRASMAX - 1); i--)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3b01      	subs	r3, #1
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	dcec      	bgt.n	800114e <ProcessDSP+0x8e>
		}
		muestrasPtr[0] = (double)adcBufPtr[n];
 8001174:	4b14      	ldr	r3, [pc, #80]	@ (80011c8 <ProcessDSP+0x108>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4413      	add	r3, r2
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	b29b      	uxth	r3, r3
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff fa8c 	bl	80006a0 <__aeabi_ui2d>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4911      	ldr	r1, [pc, #68]	@ (80011d4 <ProcessDSP+0x114>)
 800118e:	e9c1 2300 	strd	r2, r3, [r1]

		dacBufPtr[n] = (uint16_t)Valor;
 8001192:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <ProcessDSP+0x10c>)
 8001194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001198:	490f      	ldr	r1, [pc, #60]	@ (80011d8 <ProcessDSP+0x118>)
 800119a:	6808      	ldr	r0, [r1, #0]
 800119c:	68f9      	ldr	r1, [r7, #12]
 800119e:	0049      	lsls	r1, r1, #1
 80011a0:	1844      	adds	r4, r0, r1
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	f7ff faf5 	bl	8000794 <__aeabi_d2uiz>
 80011aa:	4603      	mov	r3, r0
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	8023      	strh	r3, [r4, #0]
	for(int n = 0; n < HALFBUFFERSIZE; n++)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	3301      	adds	r3, #1
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2b31      	cmp	r3, #49	@ 0x31
 80011ba:	dd87      	ble.n	80010cc <ProcessDSP+0xc>

	/*for(int n = 0; n < HALFBUFFERSIZE; n++)
		{
			dacBufPtr[n] = adcBufPtr[n];
		}*/
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bdb0      	pop	{r4, r5, r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200002d8 	.word	0x200002d8
 80011cc:	20000330 	.word	0x20000330
 80011d0:	08006520 	.word	0x08006520
 80011d4:	200002e0 	.word	0x200002e0
 80011d8:	200002dc 	.word	0x200002dc
 80011dc:	3eae100d 	.word	0x3eae100d
 80011e0:	3fa1e51d 	.word	0x3fa1e51d

080011e4 <HAL_ADC_ConvHalfCpltCallback>:
 * de los punteros al inicio de dicho buffer, de tal forma de
 * procesar los datos al mismo tiempo que se carga la segunda
 * mitad del buffer DMA
 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 80011ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011f0:	4807      	ldr	r0, [pc, #28]	@ (8001210 <HAL_ADC_ConvHalfCpltCallback+0x2c>)
 80011f2:	f001 fe68 	bl	8002ec6 <HAL_GPIO_TogglePin>
	adcBufPtr =  &adc_val[0];
 80011f6:	4b07      	ldr	r3, [pc, #28]	@ (8001214 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 80011f8:	4a07      	ldr	r2, [pc, #28]	@ (8001218 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80011fa:	601a      	str	r2, [r3, #0]
	dacBufPtr = &dac_val[0];
 80011fc:	4b07      	ldr	r3, [pc, #28]	@ (800121c <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80011fe:	4a08      	ldr	r2, [pc, #32]	@ (8001220 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 8001200:	601a      	str	r2, [r3, #0]
	flagProcess = 1; //Esta bandera indica que hay datos para procesar
 8001202:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8001204:	2201      	movs	r2, #1
 8001206:	701a      	strb	r2, [r3, #0]
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40020c00 	.word	0x40020c00
 8001214:	200002d8 	.word	0x200002d8
 8001218:	20000148 	.word	0x20000148
 800121c:	200002dc 	.word	0x200002dc
 8001220:	20000210 	.word	0x20000210
 8001224:	20000338 	.word	0x20000338

08001228 <HAL_ADC_ConvCpltCallback>:
 * de los punteros a la mitad de dicho buffer, de tal forma de
 * procesar los datos al mismo tiempo que se carga la primera
 * mitad del buffer DMA
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	adcBufPtr =  &adc_val[HALFBUFFERSIZE];
 8001230:	4b07      	ldr	r3, [pc, #28]	@ (8001250 <HAL_ADC_ConvCpltCallback+0x28>)
 8001232:	4a08      	ldr	r2, [pc, #32]	@ (8001254 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001234:	601a      	str	r2, [r3, #0]
	dacBufPtr = &dac_val[HALFBUFFERSIZE];
 8001236:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <HAL_ADC_ConvCpltCallback+0x30>)
 8001238:	4a08      	ldr	r2, [pc, #32]	@ (800125c <HAL_ADC_ConvCpltCallback+0x34>)
 800123a:	601a      	str	r2, [r3, #0]
	flagProcess = 1;  //Esta bandera indica que hay datos para procesar
 800123c:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <HAL_ADC_ConvCpltCallback+0x38>)
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	200002d8 	.word	0x200002d8
 8001254:	200001ac 	.word	0x200001ac
 8001258:	200002dc 	.word	0x200002dc
 800125c:	20000274 	.word	0x20000274
 8001260:	20000338 	.word	0x20000338

08001264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b094      	sub	sp, #80	@ 0x50
 8001268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800126a:	f107 0320 	add.w	r3, r7, #32
 800126e:	2230      	movs	r2, #48	@ 0x30
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f005 f91a 	bl	80064ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001288:	2300      	movs	r3, #0
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	4b28      	ldr	r3, [pc, #160]	@ (8001330 <SystemClock_Config+0xcc>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001290:	4a27      	ldr	r2, [pc, #156]	@ (8001330 <SystemClock_Config+0xcc>)
 8001292:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001296:	6413      	str	r3, [r2, #64]	@ 0x40
 8001298:	4b25      	ldr	r3, [pc, #148]	@ (8001330 <SystemClock_Config+0xcc>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012a4:	2300      	movs	r3, #0
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	4b22      	ldr	r3, [pc, #136]	@ (8001334 <SystemClock_Config+0xd0>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a21      	ldr	r2, [pc, #132]	@ (8001334 <SystemClock_Config+0xd0>)
 80012ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001334 <SystemClock_Config+0xd0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012c0:	2301      	movs	r3, #1
 80012c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ca:	2302      	movs	r3, #2
 80012cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012d4:	2308      	movs	r3, #8
 80012d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012d8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80012dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012de:	2302      	movs	r3, #2
 80012e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012e2:	2307      	movs	r3, #7
 80012e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e6:	f107 0320 	add.w	r3, r7, #32
 80012ea:	4618      	mov	r0, r3
 80012ec:	f003 fbac 	bl	8004a48 <HAL_RCC_OscConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012f6:	f000 f81f 	bl	8001338 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fa:	230f      	movs	r3, #15
 80012fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012fe:	2302      	movs	r3, #2
 8001300:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001306:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800130a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800130c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001310:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	2105      	movs	r1, #5
 8001318:	4618      	mov	r0, r3
 800131a:	f003 fe0d 	bl	8004f38 <HAL_RCC_ClockConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001324:	f000 f808 	bl	8001338 <Error_Handler>
  }
}
 8001328:	bf00      	nop
 800132a:	3750      	adds	r7, #80	@ 0x50
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40023800 	.word	0x40023800
 8001334:	40007000 	.word	0x40007000

08001338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800133c:	b672      	cpsid	i
}
 800133e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <Error_Handler+0x8>

08001344 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <HAL_MspInit+0x4c>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001352:	4a0f      	ldr	r2, [pc, #60]	@ (8001390 <HAL_MspInit+0x4c>)
 8001354:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001358:	6453      	str	r3, [r2, #68]	@ 0x44
 800135a:	4b0d      	ldr	r3, [pc, #52]	@ (8001390 <HAL_MspInit+0x4c>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	603b      	str	r3, [r7, #0]
 800136a:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <HAL_MspInit+0x4c>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	4a08      	ldr	r2, [pc, #32]	@ (8001390 <HAL_MspInit+0x4c>)
 8001370:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001374:	6413      	str	r3, [r2, #64]	@ 0x40
 8001376:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <HAL_MspInit+0x4c>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001382:	2007      	movs	r0, #7
 8001384:	f000 fe52 	bl	800202c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40023800 	.word	0x40023800

08001394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <NMI_Handler+0x4>

0800139c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <HardFault_Handler+0x4>

080013a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a8:	bf00      	nop
 80013aa:	e7fd      	b.n	80013a8 <MemManage_Handler+0x4>

080013ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b0:	bf00      	nop
 80013b2:	e7fd      	b.n	80013b0 <BusFault_Handler+0x4>

080013b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <UsageFault_Handler+0x4>

080013bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ea:	f000 f931 	bl	8001650 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80013f8:	4802      	ldr	r0, [pc, #8]	@ (8001404 <DMA1_Stream5_IRQHandler+0x10>)
 80013fa:	f001 f945 	bl	8002688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200000e8 	.word	0x200000e8

08001408 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800140c:	4802      	ldr	r0, [pc, #8]	@ (8001418 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800140e:	f004 f837 	bl	8005480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	2000033c 	.word	0x2000033c

0800141c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001420:	4802      	ldr	r0, [pc, #8]	@ (800142c <DMA2_Stream0_IRQHandler+0x10>)
 8001422:	f001 f931 	bl	8002688 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000074 	.word	0x20000074

08001430 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001434:	4802      	ldr	r0, [pc, #8]	@ (8001440 <OTG_FS_IRQHandler+0x10>)
 8001436:	f001 fd60 	bl	8002efa <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000388 	.word	0x20000388

08001444 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <SystemInit+0x20>)
 800144a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800144e:	4a05      	ldr	r2, [pc, #20]	@ (8001464 <SystemInit+0x20>)
 8001450:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001454:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147c:	463b      	mov	r3, r7
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001484:	4b1e      	ldr	r3, [pc, #120]	@ (8001500 <MX_TIM8_Init+0x98>)
 8001486:	4a1f      	ldr	r2, [pc, #124]	@ (8001504 <MX_TIM8_Init+0x9c>)
 8001488:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800148a:	4b1d      	ldr	r3, [pc, #116]	@ (8001500 <MX_TIM8_Init+0x98>)
 800148c:	2200      	movs	r2, #0
 800148e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001490:	4b1b      	ldr	r3, [pc, #108]	@ (8001500 <MX_TIM8_Init+0x98>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3800;
 8001496:	4b1a      	ldr	r3, [pc, #104]	@ (8001500 <MX_TIM8_Init+0x98>)
 8001498:	f640 62d8 	movw	r2, #3800	@ 0xed8
 800149c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149e:	4b18      	ldr	r3, [pc, #96]	@ (8001500 <MX_TIM8_Init+0x98>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80014a4:	4b16      	ldr	r3, [pc, #88]	@ (8001500 <MX_TIM8_Init+0x98>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014aa:	4b15      	ldr	r3, [pc, #84]	@ (8001500 <MX_TIM8_Init+0x98>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80014b0:	4813      	ldr	r0, [pc, #76]	@ (8001500 <MX_TIM8_Init+0x98>)
 80014b2:	f003 ff2d 	bl	8005310 <HAL_TIM_Base_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 80014bc:	f7ff ff3c 	bl	8001338 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80014c6:	f107 0308 	add.w	r3, r7, #8
 80014ca:	4619      	mov	r1, r3
 80014cc:	480c      	ldr	r0, [pc, #48]	@ (8001500 <MX_TIM8_Init+0x98>)
 80014ce:	f004 f8c7 	bl	8005660 <HAL_TIM_ConfigClockSource>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 80014d8:	f7ff ff2e 	bl	8001338 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014dc:	2320      	movs	r3, #32
 80014de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e0:	2300      	movs	r3, #0
 80014e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014e4:	463b      	mov	r3, r7
 80014e6:	4619      	mov	r1, r3
 80014e8:	4805      	ldr	r0, [pc, #20]	@ (8001500 <MX_TIM8_Init+0x98>)
 80014ea:	f004 faf9 	bl	8005ae0 <HAL_TIMEx_MasterConfigSynchronization>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80014f4:	f7ff ff20 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80014f8:	bf00      	nop
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	2000033c 	.word	0x2000033c
 8001504:	40010400 	.word	0x40010400

08001508 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a0e      	ldr	r2, [pc, #56]	@ (8001550 <HAL_TIM_Base_MspInit+0x48>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d115      	bne.n	8001546 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b0d      	ldr	r3, [pc, #52]	@ (8001554 <HAL_TIM_Base_MspInit+0x4c>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001522:	4a0c      	ldr	r2, [pc, #48]	@ (8001554 <HAL_TIM_Base_MspInit+0x4c>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	6453      	str	r3, [r2, #68]	@ 0x44
 800152a:	4b0a      	ldr	r3, [pc, #40]	@ (8001554 <HAL_TIM_Base_MspInit+0x4c>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	202c      	movs	r0, #44	@ 0x2c
 800153c:	f000 fd81 	bl	8002042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001540:	202c      	movs	r0, #44	@ 0x2c
 8001542:	f000 fd9a 	bl	800207a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001546:	bf00      	nop
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40010400 	.word	0x40010400
 8001554:	40023800 	.word	0x40023800

08001558 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001558:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001590 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800155c:	f7ff ff72 	bl	8001444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001560:	480c      	ldr	r0, [pc, #48]	@ (8001594 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001562:	490d      	ldr	r1, [pc, #52]	@ (8001598 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001564:	4a0d      	ldr	r2, [pc, #52]	@ (800159c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001568:	e002      	b.n	8001570 <LoopCopyDataInit>

0800156a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800156a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800156c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800156e:	3304      	adds	r3, #4

08001570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001574:	d3f9      	bcc.n	800156a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001576:	4a0a      	ldr	r2, [pc, #40]	@ (80015a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001578:	4c0a      	ldr	r4, [pc, #40]	@ (80015a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800157c:	e001      	b.n	8001582 <LoopFillZerobss>

0800157e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800157e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001580:	3204      	adds	r2, #4

08001582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001584:	d3fb      	bcc.n	800157e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001586:	f004 ff99 	bl	80064bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800158a:	f7ff fd3d 	bl	8001008 <main>
  bx  lr    
 800158e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001590:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001594:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001598:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800159c:	080065a0 	.word	0x080065a0
  ldr r2, =_sbss
 80015a0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80015a4:	20000768 	.word	0x20000768

080015a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a8:	e7fe      	b.n	80015a8 <ADC_IRQHandler>
	...

080015ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015b0:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <HAL_Init+0x40>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0d      	ldr	r2, [pc, #52]	@ (80015ec <HAL_Init+0x40>)
 80015b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015bc:	4b0b      	ldr	r3, [pc, #44]	@ (80015ec <HAL_Init+0x40>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0a      	ldr	r2, [pc, #40]	@ (80015ec <HAL_Init+0x40>)
 80015c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c8:	4b08      	ldr	r3, [pc, #32]	@ (80015ec <HAL_Init+0x40>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a07      	ldr	r2, [pc, #28]	@ (80015ec <HAL_Init+0x40>)
 80015ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d4:	2003      	movs	r0, #3
 80015d6:	f000 fd29 	bl	800202c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015da:	2000      	movs	r0, #0
 80015dc:	f000 f808 	bl	80015f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015e0:	f7ff feb0 	bl	8001344 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40023c00 	.word	0x40023c00

080015f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f8:	4b12      	ldr	r3, [pc, #72]	@ (8001644 <HAL_InitTick+0x54>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b12      	ldr	r3, [pc, #72]	@ (8001648 <HAL_InitTick+0x58>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	4619      	mov	r1, r3
 8001602:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001606:	fbb3 f3f1 	udiv	r3, r3, r1
 800160a:	fbb2 f3f3 	udiv	r3, r2, r3
 800160e:	4618      	mov	r0, r3
 8001610:	f000 fd41 	bl	8002096 <HAL_SYSTICK_Config>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e00e      	b.n	800163c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b0f      	cmp	r3, #15
 8001622:	d80a      	bhi.n	800163a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001624:	2200      	movs	r2, #0
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	f04f 30ff 	mov.w	r0, #4294967295
 800162c:	f000 fd09 	bl	8002042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001630:	4a06      	ldr	r2, [pc, #24]	@ (800164c <HAL_InitTick+0x5c>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
 8001638:	e000      	b.n	800163c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000000 	.word	0x20000000
 8001648:	20000008 	.word	0x20000008
 800164c:	20000004 	.word	0x20000004

08001650 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001654:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <HAL_IncTick+0x20>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	461a      	mov	r2, r3
 800165a:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <HAL_IncTick+0x24>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4413      	add	r3, r2
 8001660:	4a04      	ldr	r2, [pc, #16]	@ (8001674 <HAL_IncTick+0x24>)
 8001662:	6013      	str	r3, [r2, #0]
}
 8001664:	bf00      	nop
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	20000008 	.word	0x20000008
 8001674:	20000384 	.word	0x20000384

08001678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return uwTick;
 800167c:	4b03      	ldr	r3, [pc, #12]	@ (800168c <HAL_GetTick+0x14>)
 800167e:	681b      	ldr	r3, [r3, #0]
}
 8001680:	4618      	mov	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	20000384 	.word	0x20000384

08001690 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001698:	2300      	movs	r3, #0
 800169a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e033      	b.n	800170e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d109      	bne.n	80016c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fa5a 	bl	8000b68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c6:	f003 0310 	and.w	r3, r3, #16
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d118      	bne.n	8001700 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016d6:	f023 0302 	bic.w	r3, r3, #2
 80016da:	f043 0202 	orr.w	r2, r3, #2
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 fa54 	bl	8001b90 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f2:	f023 0303 	bic.w	r3, r3, #3
 80016f6:	f043 0201 	orr.w	r2, r3, #1
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80016fe:	e001      	b.n	8001704 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800170c:	7bfb      	ldrb	r3, [r7, #15]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800172e:	2b01      	cmp	r3, #1
 8001730:	d101      	bne.n	8001736 <HAL_ADC_Start_DMA+0x1e>
 8001732:	2302      	movs	r3, #2
 8001734:	e0e9      	b.n	800190a <HAL_ADC_Start_DMA+0x1f2>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	2b01      	cmp	r3, #1
 800174a:	d018      	beq.n	800177e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f042 0201 	orr.w	r2, r2, #1
 800175a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800175c:	4b6d      	ldr	r3, [pc, #436]	@ (8001914 <HAL_ADC_Start_DMA+0x1fc>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a6d      	ldr	r2, [pc, #436]	@ (8001918 <HAL_ADC_Start_DMA+0x200>)
 8001762:	fba2 2303 	umull	r2, r3, r2, r3
 8001766:	0c9a      	lsrs	r2, r3, #18
 8001768:	4613      	mov	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001770:	e002      	b.n	8001778 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	3b01      	subs	r3, #1
 8001776:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f9      	bne.n	8001772 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001788:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800178c:	d107      	bne.n	800179e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800179c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	f040 80a1 	bne.w	80018f0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80017b6:	f023 0301 	bic.w	r3, r3, #1
 80017ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d007      	beq.n	80017e0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017d8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017ec:	d106      	bne.n	80017fc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f2:	f023 0206 	bic.w	r2, r3, #6
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	645a      	str	r2, [r3, #68]	@ 0x44
 80017fa:	e002      	b.n	8001802 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2200      	movs	r2, #0
 8001800:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800180a:	4b44      	ldr	r3, [pc, #272]	@ (800191c <HAL_ADC_Start_DMA+0x204>)
 800180c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001812:	4a43      	ldr	r2, [pc, #268]	@ (8001920 <HAL_ADC_Start_DMA+0x208>)
 8001814:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800181a:	4a42      	ldr	r2, [pc, #264]	@ (8001924 <HAL_ADC_Start_DMA+0x20c>)
 800181c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001822:	4a41      	ldr	r2, [pc, #260]	@ (8001928 <HAL_ADC_Start_DMA+0x210>)
 8001824:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800182e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800183e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800184e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	334c      	adds	r3, #76	@ 0x4c
 800185a:	4619      	mov	r1, r3
 800185c:	68ba      	ldr	r2, [r7, #8]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f000 feba 	bl	80025d8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 031f 	and.w	r3, r3, #31
 800186c:	2b00      	cmp	r3, #0
 800186e:	d12a      	bne.n	80018c6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a2d      	ldr	r2, [pc, #180]	@ (800192c <HAL_ADC_Start_DMA+0x214>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d015      	beq.n	80018a6 <HAL_ADC_Start_DMA+0x18e>
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a2c      	ldr	r2, [pc, #176]	@ (8001930 <HAL_ADC_Start_DMA+0x218>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d105      	bne.n	8001890 <HAL_ADC_Start_DMA+0x178>
 8001884:	4b25      	ldr	r3, [pc, #148]	@ (800191c <HAL_ADC_Start_DMA+0x204>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 031f 	and.w	r3, r3, #31
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00a      	beq.n	80018a6 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a27      	ldr	r2, [pc, #156]	@ (8001934 <HAL_ADC_Start_DMA+0x21c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d136      	bne.n	8001908 <HAL_ADC_Start_DMA+0x1f0>
 800189a:	4b20      	ldr	r3, [pc, #128]	@ (800191c <HAL_ADC_Start_DMA+0x204>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f003 0310 	and.w	r3, r3, #16
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d130      	bne.n	8001908 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d129      	bne.n	8001908 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	e020      	b.n	8001908 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a18      	ldr	r2, [pc, #96]	@ (800192c <HAL_ADC_Start_DMA+0x214>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d11b      	bne.n	8001908 <HAL_ADC_Start_DMA+0x1f0>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d114      	bne.n	8001908 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	e00b      	b.n	8001908 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f4:	f043 0210 	orr.w	r2, r3, #16
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001900:	f043 0201 	orr.w	r2, r3, #1
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000000 	.word	0x20000000
 8001918:	431bde83 	.word	0x431bde83
 800191c:	40012300 	.word	0x40012300
 8001920:	08001d89 	.word	0x08001d89
 8001924:	08001e43 	.word	0x08001e43
 8001928:	08001e5f 	.word	0x08001e5f
 800192c:	40012000 	.word	0x40012000
 8001930:	40012100 	.word	0x40012100
 8001934:	40012200 	.word	0x40012200

08001938 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001960:	2b01      	cmp	r3, #1
 8001962:	d101      	bne.n	8001968 <HAL_ADC_ConfigChannel+0x1c>
 8001964:	2302      	movs	r3, #2
 8001966:	e105      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x228>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b09      	cmp	r3, #9
 8001976:	d925      	bls.n	80019c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68d9      	ldr	r1, [r3, #12]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	b29b      	uxth	r3, r3
 8001984:	461a      	mov	r2, r3
 8001986:	4613      	mov	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4413      	add	r3, r2
 800198c:	3b1e      	subs	r3, #30
 800198e:	2207      	movs	r2, #7
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43da      	mvns	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	400a      	ands	r2, r1
 800199c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68d9      	ldr	r1, [r3, #12]
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	4618      	mov	r0, r3
 80019b0:	4603      	mov	r3, r0
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	4403      	add	r3, r0
 80019b6:	3b1e      	subs	r3, #30
 80019b8:	409a      	lsls	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	e022      	b.n	8001a0a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6919      	ldr	r1, [r3, #16]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	461a      	mov	r2, r3
 80019d2:	4613      	mov	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	2207      	movs	r2, #7
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43da      	mvns	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	400a      	ands	r2, r1
 80019e6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6919      	ldr	r1, [r3, #16]
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	4618      	mov	r0, r3
 80019fa:	4603      	mov	r3, r0
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	4403      	add	r3, r0
 8001a00:	409a      	lsls	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	430a      	orrs	r2, r1
 8001a08:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b06      	cmp	r3, #6
 8001a10:	d824      	bhi.n	8001a5c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	3b05      	subs	r3, #5
 8001a24:	221f      	movs	r2, #31
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	400a      	ands	r2, r1
 8001a32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	4618      	mov	r0, r3
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3b05      	subs	r3, #5
 8001a4e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a5a:	e04c      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b0c      	cmp	r3, #12
 8001a62:	d824      	bhi.n	8001aae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	3b23      	subs	r3, #35	@ 0x23
 8001a76:	221f      	movs	r2, #31
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43da      	mvns	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	400a      	ands	r2, r1
 8001a84:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	4618      	mov	r0, r3
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	3b23      	subs	r3, #35	@ 0x23
 8001aa0:	fa00 f203 	lsl.w	r2, r0, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	631a      	str	r2, [r3, #48]	@ 0x30
 8001aac:	e023      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	3b41      	subs	r3, #65	@ 0x41
 8001ac0:	221f      	movs	r2, #31
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43da      	mvns	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	400a      	ands	r2, r1
 8001ace:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	4618      	mov	r0, r3
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	3b41      	subs	r3, #65	@ 0x41
 8001aea:	fa00 f203 	lsl.w	r2, r0, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001af6:	4b22      	ldr	r3, [pc, #136]	@ (8001b80 <HAL_ADC_ConfigChannel+0x234>)
 8001af8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a21      	ldr	r2, [pc, #132]	@ (8001b84 <HAL_ADC_ConfigChannel+0x238>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d109      	bne.n	8001b18 <HAL_ADC_ConfigChannel+0x1cc>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b12      	cmp	r3, #18
 8001b0a:	d105      	bne.n	8001b18 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a19      	ldr	r2, [pc, #100]	@ (8001b84 <HAL_ADC_ConfigChannel+0x238>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d123      	bne.n	8001b6a <HAL_ADC_ConfigChannel+0x21e>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2b10      	cmp	r3, #16
 8001b28:	d003      	beq.n	8001b32 <HAL_ADC_ConfigChannel+0x1e6>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b11      	cmp	r3, #17
 8001b30:	d11b      	bne.n	8001b6a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2b10      	cmp	r3, #16
 8001b44:	d111      	bne.n	8001b6a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b46:	4b10      	ldr	r3, [pc, #64]	@ (8001b88 <HAL_ADC_ConfigChannel+0x23c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a10      	ldr	r2, [pc, #64]	@ (8001b8c <HAL_ADC_ConfigChannel+0x240>)
 8001b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b50:	0c9a      	lsrs	r2, r3, #18
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b5c:	e002      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	3b01      	subs	r3, #1
 8001b62:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1f9      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	40012300 	.word	0x40012300
 8001b84:	40012000 	.word	0x40012000
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	431bde83 	.word	0x431bde83

08001b90 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b98:	4b79      	ldr	r3, [pc, #484]	@ (8001d80 <ADC_Init+0x1f0>)
 8001b9a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6859      	ldr	r1, [r3, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	021a      	lsls	r2, r3, #8
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001be8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6859      	ldr	r1, [r3, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6899      	ldr	r1, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c22:	4a58      	ldr	r2, [pc, #352]	@ (8001d84 <ADC_Init+0x1f4>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d022      	beq.n	8001c6e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c36:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6899      	ldr	r1, [r3, #8]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6899      	ldr	r1, [r3, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	e00f      	b.n	8001c8e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001c8c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0202 	bic.w	r2, r2, #2
 8001c9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6899      	ldr	r1, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	7e1b      	ldrb	r3, [r3, #24]
 8001ca8:	005a      	lsls	r2, r3, #1
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d01b      	beq.n	8001cf4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001cca:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001cda:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6859      	ldr	r1, [r3, #4]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	035a      	lsls	r2, r3, #13
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	e007      	b.n	8001d04 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d02:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001d12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	051a      	lsls	r2, r3, #20
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001d38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6899      	ldr	r1, [r3, #8]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d46:	025a      	lsls	r2, r3, #9
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6899      	ldr	r1, [r3, #8]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	029a      	lsls	r2, r3, #10
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	609a      	str	r2, [r3, #8]
}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	40012300 	.word	0x40012300
 8001d84:	0f000001 	.word	0x0f000001

08001d88 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d94:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d13c      	bne.n	8001e1c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d12b      	bne.n	8001e14 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d127      	bne.n	8001e14 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dca:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d006      	beq.n	8001de0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d119      	bne.n	8001e14 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0220 	bic.w	r2, r2, #32
 8001dee:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d105      	bne.n	8001e14 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0c:	f043 0201 	orr.w	r2, r3, #1
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f7ff fa07 	bl	8001228 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001e1a:	e00e      	b.n	8001e3a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e20:	f003 0310 	and.w	r3, r3, #16
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f7ff fd85 	bl	8001938 <HAL_ADC_ErrorCallback>
}
 8001e2e:	e004      	b.n	8001e3a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	4798      	blx	r3
}
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b084      	sub	sp, #16
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e4e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f7ff f9c7 	bl	80011e4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b084      	sub	sp, #16
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e6a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2240      	movs	r2, #64	@ 0x40
 8001e70:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e76:	f043 0204 	orr.w	r2, r3, #4
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f7ff fd5a 	bl	8001938 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e84:	bf00      	nop
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001eb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ebe:	4a04      	ldr	r2, [pc, #16]	@ (8001ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	60d3      	str	r3, [r2, #12]
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ed8:	4b04      	ldr	r3, [pc, #16]	@ (8001eec <__NVIC_GetPriorityGrouping+0x18>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	0a1b      	lsrs	r3, r3, #8
 8001ede:	f003 0307 	and.w	r3, r3, #7
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	db0b      	blt.n	8001f1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	f003 021f 	and.w	r2, r3, #31
 8001f08:	4907      	ldr	r1, [pc, #28]	@ (8001f28 <__NVIC_EnableIRQ+0x38>)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	095b      	lsrs	r3, r3, #5
 8001f10:	2001      	movs	r0, #1
 8001f12:	fa00 f202 	lsl.w	r2, r0, r2
 8001f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	e000e100 	.word	0xe000e100

08001f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	6039      	str	r1, [r7, #0]
 8001f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	db0a      	blt.n	8001f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	490c      	ldr	r1, [pc, #48]	@ (8001f78 <__NVIC_SetPriority+0x4c>)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	0112      	lsls	r2, r2, #4
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	440b      	add	r3, r1
 8001f50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f54:	e00a      	b.n	8001f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4908      	ldr	r1, [pc, #32]	@ (8001f7c <__NVIC_SetPriority+0x50>)
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	3b04      	subs	r3, #4
 8001f64:	0112      	lsls	r2, r2, #4
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	440b      	add	r3, r1
 8001f6a:	761a      	strb	r2, [r3, #24]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000e100 	.word	0xe000e100
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b089      	sub	sp, #36	@ 0x24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f1c3 0307 	rsb	r3, r3, #7
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	bf28      	it	cs
 8001f9e:	2304      	movcs	r3, #4
 8001fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	2b06      	cmp	r3, #6
 8001fa8:	d902      	bls.n	8001fb0 <NVIC_EncodePriority+0x30>
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3b03      	subs	r3, #3
 8001fae:	e000      	b.n	8001fb2 <NVIC_EncodePriority+0x32>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	43da      	mvns	r2, r3
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	401a      	ands	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd2:	43d9      	mvns	r1, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd8:	4313      	orrs	r3, r2
         );
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3724      	adds	r7, #36	@ 0x24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
	...

08001fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ff8:	d301      	bcc.n	8001ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e00f      	b.n	800201e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8002028 <SysTick_Config+0x40>)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3b01      	subs	r3, #1
 8002004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002006:	210f      	movs	r1, #15
 8002008:	f04f 30ff 	mov.w	r0, #4294967295
 800200c:	f7ff ff8e 	bl	8001f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002010:	4b05      	ldr	r3, [pc, #20]	@ (8002028 <SysTick_Config+0x40>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002016:	4b04      	ldr	r3, [pc, #16]	@ (8002028 <SysTick_Config+0x40>)
 8002018:	2207      	movs	r2, #7
 800201a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	e000e010 	.word	0xe000e010

0800202c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff ff29 	bl	8001e8c <__NVIC_SetPriorityGrouping>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002042:	b580      	push	{r7, lr}
 8002044:	b086      	sub	sp, #24
 8002046:	af00      	add	r7, sp, #0
 8002048:	4603      	mov	r3, r0
 800204a:	60b9      	str	r1, [r7, #8]
 800204c:	607a      	str	r2, [r7, #4]
 800204e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002054:	f7ff ff3e 	bl	8001ed4 <__NVIC_GetPriorityGrouping>
 8002058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	68b9      	ldr	r1, [r7, #8]
 800205e:	6978      	ldr	r0, [r7, #20]
 8002060:	f7ff ff8e 	bl	8001f80 <NVIC_EncodePriority>
 8002064:	4602      	mov	r2, r0
 8002066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800206a:	4611      	mov	r1, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff ff5d 	bl	8001f2c <__NVIC_SetPriority>
}
 8002072:	bf00      	nop
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	4603      	mov	r3, r0
 8002082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ff31 	bl	8001ef0 <__NVIC_EnableIRQ>
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff ffa2 	bl	8001fe8 <SysTick_Config>
 80020a4:	4603      	mov	r3, r0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e014      	b.n	80020ea <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	791b      	ldrb	r3, [r3, #4]
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d105      	bne.n	80020d6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7fe fdf3 	bl	8000cbc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2202      	movs	r2, #2
 80020da:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
 8002100:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0a2      	b.n	8002256 <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	795b      	ldrb	r3, [r3, #5]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <HAL_DAC_Start_DMA+0x28>
 8002118:	2302      	movs	r3, #2
 800211a:	e09c      	b.n	8002256 <HAL_DAC_Start_DMA+0x162>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2201      	movs	r2, #1
 8002120:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2202      	movs	r2, #2
 8002126:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d129      	bne.n	8002182 <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	4a4b      	ldr	r2, [pc, #300]	@ (8002260 <HAL_DAC_Start_DMA+0x16c>)
 8002134:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	4a4a      	ldr	r2, [pc, #296]	@ (8002264 <HAL_DAC_Start_DMA+0x170>)
 800213c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	4a49      	ldr	r2, [pc, #292]	@ (8002268 <HAL_DAC_Start_DMA+0x174>)
 8002144:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002154:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002156:	6a3b      	ldr	r3, [r7, #32]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_DAC_Start_DMA+0x70>
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	2b04      	cmp	r3, #4
 8002160:	d005      	beq.n	800216e <HAL_DAC_Start_DMA+0x7a>
 8002162:	e009      	b.n	8002178 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	3308      	adds	r3, #8
 800216a:	613b      	str	r3, [r7, #16]
        break;
 800216c:	e033      	b.n	80021d6 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	330c      	adds	r3, #12
 8002174:	613b      	str	r3, [r7, #16]
        break;
 8002176:	e02e      	b.n	80021d6 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	3310      	adds	r3, #16
 800217e:	613b      	str	r3, [r7, #16]
        break;
 8002180:	e029      	b.n	80021d6 <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	4a39      	ldr	r2, [pc, #228]	@ (800226c <HAL_DAC_Start_DMA+0x178>)
 8002188:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	4a38      	ldr	r2, [pc, #224]	@ (8002270 <HAL_DAC_Start_DMA+0x17c>)
 8002190:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	4a37      	ldr	r2, [pc, #220]	@ (8002274 <HAL_DAC_Start_DMA+0x180>)
 8002198:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80021a8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_DAC_Start_DMA+0xc4>
 80021b0:	6a3b      	ldr	r3, [r7, #32]
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d005      	beq.n	80021c2 <HAL_DAC_Start_DMA+0xce>
 80021b6:	e009      	b.n	80021cc <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	3314      	adds	r3, #20
 80021be:	613b      	str	r3, [r7, #16]
        break;
 80021c0:	e009      	b.n	80021d6 <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	3318      	adds	r3, #24
 80021c8:	613b      	str	r3, [r7, #16]
        break;
 80021ca:	e004      	b.n	80021d6 <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	331c      	adds	r3, #28
 80021d2:	613b      	str	r3, [r7, #16]
        break;
 80021d4:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d111      	bne.n	8002200 <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80021ea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6898      	ldr	r0, [r3, #8]
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	f000 f9ef 	bl	80025d8 <HAL_DMA_Start_IT>
 80021fa:	4603      	mov	r3, r0
 80021fc:	75fb      	strb	r3, [r7, #23]
 80021fe:	e010      	b.n	8002222 <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800220e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	68d8      	ldr	r0, [r3, #12]
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	f000 f9dd 	bl	80025d8 <HAL_DMA_Start_IT>
 800221e:	4603      	mov	r3, r0
 8002220:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002228:	7dfb      	ldrb	r3, [r7, #23]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10c      	bne.n	8002248 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6819      	ldr	r1, [r3, #0]
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	2201      	movs	r2, #1
 800223c:	409a      	lsls	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	e005      	b.n	8002254 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	f043 0204 	orr.w	r2, r3, #4
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002254:	7dfb      	ldrb	r3, [r7, #23]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	08002367 	.word	0x08002367
 8002264:	08002389 	.word	0x08002389
 8002268:	080023a5 	.word	0x080023a5
 800226c:	0800240f 	.word	0x0800240f
 8002270:	08002431 	.word	0x08002431
 8002274:	0800244d 	.word	0x0800244d

08002278 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b089      	sub	sp, #36	@ 0x24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022c0:	2300      	movs	r3, #0
 80022c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d002      	beq.n	80022d0 <HAL_DAC_ConfigChannel+0x1c>
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e042      	b.n	800235a <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	795b      	ldrb	r3, [r3, #5]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d101      	bne.n	80022e0 <HAL_DAC_ConfigChannel+0x2c>
 80022dc:	2302      	movs	r3, #2
 80022de:	e03c      	b.n	800235a <HAL_DAC_ConfigChannel+0xa6>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2201      	movs	r2, #1
 80022e4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2202      	movs	r2, #2
 80022ea:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f003 0310 	and.w	r3, r3, #16
 80022fa:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	4313      	orrs	r3, r2
 8002314:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f003 0310 	and.w	r3, r3, #16
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6819      	ldr	r1, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	22c0      	movs	r2, #192	@ 0xc0
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43da      	mvns	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	400a      	ands	r2, r1
 800234a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2201      	movs	r2, #1
 8002350:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002358:	7ffb      	ldrb	r3, [r7, #31]
}
 800235a:	4618      	mov	r0, r3
 800235c:	3724      	adds	r7, #36	@ 0x24
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b084      	sub	sp, #16
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002372:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f7ff ff7f 	bl	8002278 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2201      	movs	r2, #1
 800237e:	711a      	strb	r2, [r3, #4]
}
 8002380:	bf00      	nop
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002394:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f7ff ff78 	bl	800228c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800239c:	bf00      	nop
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b0:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	f043 0204 	orr.w	r2, r3, #4
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f7ff ff6e 	bl	80022a0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2201      	movs	r2, #1
 80023c8:	711a      	strb	r2, [r3, #4]
}
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b084      	sub	sp, #16
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800241a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f7ff ffd8 	bl	80023d2 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2201      	movs	r2, #1
 8002426:	711a      	strb	r2, [r3, #4]
}
 8002428:	bf00      	nop
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800243c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f7ff ffd1 	bl	80023e6 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002444:	bf00      	nop
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002458:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	f043 0204 	orr.w	r2, r3, #4
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f7ff ffc7 	bl	80023fa <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2201      	movs	r2, #1
 8002470:	711a      	strb	r2, [r3, #4]
}
 8002472:	bf00      	nop
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002488:	f7ff f8f6 	bl	8001678 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e099      	b.n	80025cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0201 	bic.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024b8:	e00f      	b.n	80024da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024ba:	f7ff f8dd 	bl	8001678 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b05      	cmp	r3, #5
 80024c6:	d908      	bls.n	80024da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2220      	movs	r2, #32
 80024cc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2203      	movs	r2, #3
 80024d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e078      	b.n	80025cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1e8      	bne.n	80024ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	4b38      	ldr	r3, [pc, #224]	@ (80025d4 <HAL_DMA_Init+0x158>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002506:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002512:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800251e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	4313      	orrs	r3, r2
 800252a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002530:	2b04      	cmp	r3, #4
 8002532:	d107      	bne.n	8002544 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253c:	4313      	orrs	r3, r2
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	4313      	orrs	r3, r2
 8002542:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f023 0307 	bic.w	r3, r3, #7
 800255a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	4313      	orrs	r3, r2
 8002564:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256a:	2b04      	cmp	r3, #4
 800256c:	d117      	bne.n	800259e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	4313      	orrs	r3, r2
 8002576:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00e      	beq.n	800259e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 fa6f 	bl	8002a64 <DMA_CheckFifoParam>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d008      	beq.n	800259e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2240      	movs	r2, #64	@ 0x40
 8002590:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800259a:	2301      	movs	r3, #1
 800259c:	e016      	b.n	80025cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 fa26 	bl	80029f8 <DMA_CalcBaseAndBitshift>
 80025ac:	4603      	mov	r3, r0
 80025ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b4:	223f      	movs	r2, #63	@ 0x3f
 80025b6:	409a      	lsls	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	f010803f 	.word	0xf010803f

080025d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
 80025e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025e6:	2300      	movs	r3, #0
 80025e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d101      	bne.n	80025fe <HAL_DMA_Start_IT+0x26>
 80025fa:	2302      	movs	r3, #2
 80025fc:	e040      	b.n	8002680 <HAL_DMA_Start_IT+0xa8>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b01      	cmp	r3, #1
 8002610:	d12f      	bne.n	8002672 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2202      	movs	r2, #2
 8002616:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	68b9      	ldr	r1, [r7, #8]
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f000 f9b8 	bl	800299c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002630:	223f      	movs	r2, #63	@ 0x3f
 8002632:	409a      	lsls	r2, r3
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0216 	orr.w	r2, r2, #22
 8002646:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264c:	2b00      	cmp	r3, #0
 800264e:	d007      	beq.n	8002660 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0208 	orr.w	r2, r2, #8
 800265e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f042 0201 	orr.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	e005      	b.n	800267e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800267a:	2302      	movs	r3, #2
 800267c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800267e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002694:	4b8e      	ldr	r3, [pc, #568]	@ (80028d0 <HAL_DMA_IRQHandler+0x248>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a8e      	ldr	r2, [pc, #568]	@ (80028d4 <HAL_DMA_IRQHandler+0x24c>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	0a9b      	lsrs	r3, r3, #10
 80026a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b2:	2208      	movs	r2, #8
 80026b4:	409a      	lsls	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d01a      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d013      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0204 	bic.w	r2, r2, #4
 80026da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e0:	2208      	movs	r2, #8
 80026e2:	409a      	lsls	r2, r3
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ec:	f043 0201 	orr.w	r2, r3, #1
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f8:	2201      	movs	r2, #1
 80026fa:	409a      	lsls	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4013      	ands	r3, r2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d012      	beq.n	800272a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00b      	beq.n	800272a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002716:	2201      	movs	r2, #1
 8002718:	409a      	lsls	r2, r3
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002722:	f043 0202 	orr.w	r2, r3, #2
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800272e:	2204      	movs	r2, #4
 8002730:	409a      	lsls	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	4013      	ands	r3, r2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d012      	beq.n	8002760 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00b      	beq.n	8002760 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800274c:	2204      	movs	r2, #4
 800274e:	409a      	lsls	r2, r3
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002758:	f043 0204 	orr.w	r2, r3, #4
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002764:	2210      	movs	r2, #16
 8002766:	409a      	lsls	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4013      	ands	r3, r2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d043      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d03c      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002782:	2210      	movs	r2, #16
 8002784:	409a      	lsls	r2, r3
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d018      	beq.n	80027ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d108      	bne.n	80027b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d024      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	4798      	blx	r3
 80027b6:	e01f      	b.n	80027f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d01b      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	4798      	blx	r3
 80027c8:	e016      	b.n	80027f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d107      	bne.n	80027e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0208 	bic.w	r2, r2, #8
 80027e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027fc:	2220      	movs	r2, #32
 80027fe:	409a      	lsls	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4013      	ands	r3, r2
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 808f 	beq.w	8002928 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0310 	and.w	r3, r3, #16
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 8087 	beq.w	8002928 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800281e:	2220      	movs	r2, #32
 8002820:	409a      	lsls	r2, r3
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b05      	cmp	r3, #5
 8002830:	d136      	bne.n	80028a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0216 	bic.w	r2, r2, #22
 8002840:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695a      	ldr	r2, [r3, #20]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002850:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002856:	2b00      	cmp	r3, #0
 8002858:	d103      	bne.n	8002862 <HAL_DMA_IRQHandler+0x1da>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800285e:	2b00      	cmp	r3, #0
 8002860:	d007      	beq.n	8002872 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0208 	bic.w	r2, r2, #8
 8002870:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002876:	223f      	movs	r2, #63	@ 0x3f
 8002878:	409a      	lsls	r2, r3
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002892:	2b00      	cmp	r3, #0
 8002894:	d07e      	beq.n	8002994 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	4798      	blx	r3
        }
        return;
 800289e:	e079      	b.n	8002994 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d01d      	beq.n	80028ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10d      	bne.n	80028d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d031      	beq.n	8002928 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	4798      	blx	r3
 80028cc:	e02c      	b.n	8002928 <HAL_DMA_IRQHandler+0x2a0>
 80028ce:	bf00      	nop
 80028d0:	20000000 	.word	0x20000000
 80028d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d023      	beq.n	8002928 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	4798      	blx	r3
 80028e8:	e01e      	b.n	8002928 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10f      	bne.n	8002918 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0210 	bic.w	r2, r2, #16
 8002906:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800292c:	2b00      	cmp	r3, #0
 800292e:	d032      	beq.n	8002996 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d022      	beq.n	8002982 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2205      	movs	r2, #5
 8002940:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0201 	bic.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	3301      	adds	r3, #1
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	429a      	cmp	r2, r3
 800295e:	d307      	bcc.n	8002970 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f2      	bne.n	8002954 <HAL_DMA_IRQHandler+0x2cc>
 800296e:	e000      	b.n	8002972 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002970:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002986:	2b00      	cmp	r3, #0
 8002988:	d005      	beq.n	8002996 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	4798      	blx	r3
 8002992:	e000      	b.n	8002996 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002994:	bf00      	nop
    }
  }
}
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80029b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2b40      	cmp	r3, #64	@ 0x40
 80029c8:	d108      	bne.n	80029dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029da:	e007      	b.n	80029ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	60da      	str	r2, [r3, #12]
}
 80029ec:	bf00      	nop
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	3b10      	subs	r3, #16
 8002a08:	4a14      	ldr	r2, [pc, #80]	@ (8002a5c <DMA_CalcBaseAndBitshift+0x64>)
 8002a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0e:	091b      	lsrs	r3, r3, #4
 8002a10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a12:	4a13      	ldr	r2, [pc, #76]	@ (8002a60 <DMA_CalcBaseAndBitshift+0x68>)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4413      	add	r3, r2
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2b03      	cmp	r3, #3
 8002a24:	d909      	bls.n	8002a3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a2e:	f023 0303 	bic.w	r3, r3, #3
 8002a32:	1d1a      	adds	r2, r3, #4
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a38:	e007      	b.n	8002a4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a42:	f023 0303 	bic.w	r3, r3, #3
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	aaaaaaab 	.word	0xaaaaaaab
 8002a60:	08006588 	.word	0x08006588

08002a64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d11f      	bne.n	8002abe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2b03      	cmp	r3, #3
 8002a82:	d856      	bhi.n	8002b32 <DMA_CheckFifoParam+0xce>
 8002a84:	a201      	add	r2, pc, #4	@ (adr r2, 8002a8c <DMA_CheckFifoParam+0x28>)
 8002a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8a:	bf00      	nop
 8002a8c:	08002a9d 	.word	0x08002a9d
 8002a90:	08002aaf 	.word	0x08002aaf
 8002a94:	08002a9d 	.word	0x08002a9d
 8002a98:	08002b33 	.word	0x08002b33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d046      	beq.n	8002b36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aac:	e043      	b.n	8002b36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ab6:	d140      	bne.n	8002b3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002abc:	e03d      	b.n	8002b3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ac6:	d121      	bne.n	8002b0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d837      	bhi.n	8002b3e <DMA_CheckFifoParam+0xda>
 8002ace:	a201      	add	r2, pc, #4	@ (adr r2, 8002ad4 <DMA_CheckFifoParam+0x70>)
 8002ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad4:	08002ae5 	.word	0x08002ae5
 8002ad8:	08002aeb 	.word	0x08002aeb
 8002adc:	08002ae5 	.word	0x08002ae5
 8002ae0:	08002afd 	.word	0x08002afd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae8:	e030      	b.n	8002b4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d025      	beq.n	8002b42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002afa:	e022      	b.n	8002b42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b00:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b04:	d11f      	bne.n	8002b46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b0a:	e01c      	b.n	8002b46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d903      	bls.n	8002b1a <DMA_CheckFifoParam+0xb6>
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	d003      	beq.n	8002b20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b18:	e018      	b.n	8002b4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	73fb      	strb	r3, [r7, #15]
      break;
 8002b1e:	e015      	b.n	8002b4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00e      	beq.n	8002b4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b30:	e00b      	b.n	8002b4a <DMA_CheckFifoParam+0xe6>
      break;
 8002b32:	bf00      	nop
 8002b34:	e00a      	b.n	8002b4c <DMA_CheckFifoParam+0xe8>
      break;
 8002b36:	bf00      	nop
 8002b38:	e008      	b.n	8002b4c <DMA_CheckFifoParam+0xe8>
      break;
 8002b3a:	bf00      	nop
 8002b3c:	e006      	b.n	8002b4c <DMA_CheckFifoParam+0xe8>
      break;
 8002b3e:	bf00      	nop
 8002b40:	e004      	b.n	8002b4c <DMA_CheckFifoParam+0xe8>
      break;
 8002b42:	bf00      	nop
 8002b44:	e002      	b.n	8002b4c <DMA_CheckFifoParam+0xe8>
      break;   
 8002b46:	bf00      	nop
 8002b48:	e000      	b.n	8002b4c <DMA_CheckFifoParam+0xe8>
      break;
 8002b4a:	bf00      	nop
    }
  } 
  
  return status; 
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop

08002b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b089      	sub	sp, #36	@ 0x24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
 8002b76:	e16b      	b.n	8002e50 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b78:	2201      	movs	r2, #1
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	f040 815a 	bne.w	8002e4a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d005      	beq.n	8002bae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d130      	bne.n	8002c10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	2203      	movs	r2, #3
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002be4:	2201      	movs	r2, #1
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	43db      	mvns	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	091b      	lsrs	r3, r3, #4
 8002bfa:	f003 0201 	and.w	r2, r3, #1
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d017      	beq.n	8002c4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	2203      	movs	r2, #3
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d123      	bne.n	8002ca0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	08da      	lsrs	r2, r3, #3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3208      	adds	r2, #8
 8002c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	220f      	movs	r2, #15
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	08da      	lsrs	r2, r3, #3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3208      	adds	r2, #8
 8002c9a:	69b9      	ldr	r1, [r7, #24]
 8002c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	2203      	movs	r2, #3
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 0203 	and.w	r2, r3, #3
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80b4 	beq.w	8002e4a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	4b60      	ldr	r3, [pc, #384]	@ (8002e68 <HAL_GPIO_Init+0x30c>)
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cea:	4a5f      	ldr	r2, [pc, #380]	@ (8002e68 <HAL_GPIO_Init+0x30c>)
 8002cec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cf2:	4b5d      	ldr	r3, [pc, #372]	@ (8002e68 <HAL_GPIO_Init+0x30c>)
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cfe:	4a5b      	ldr	r2, [pc, #364]	@ (8002e6c <HAL_GPIO_Init+0x310>)
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	089b      	lsrs	r3, r3, #2
 8002d04:	3302      	adds	r3, #2
 8002d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	220f      	movs	r2, #15
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a52      	ldr	r2, [pc, #328]	@ (8002e70 <HAL_GPIO_Init+0x314>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d02b      	beq.n	8002d82 <HAL_GPIO_Init+0x226>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a51      	ldr	r2, [pc, #324]	@ (8002e74 <HAL_GPIO_Init+0x318>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d025      	beq.n	8002d7e <HAL_GPIO_Init+0x222>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a50      	ldr	r2, [pc, #320]	@ (8002e78 <HAL_GPIO_Init+0x31c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d01f      	beq.n	8002d7a <HAL_GPIO_Init+0x21e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a4f      	ldr	r2, [pc, #316]	@ (8002e7c <HAL_GPIO_Init+0x320>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d019      	beq.n	8002d76 <HAL_GPIO_Init+0x21a>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a4e      	ldr	r2, [pc, #312]	@ (8002e80 <HAL_GPIO_Init+0x324>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d013      	beq.n	8002d72 <HAL_GPIO_Init+0x216>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a4d      	ldr	r2, [pc, #308]	@ (8002e84 <HAL_GPIO_Init+0x328>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d00d      	beq.n	8002d6e <HAL_GPIO_Init+0x212>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a4c      	ldr	r2, [pc, #304]	@ (8002e88 <HAL_GPIO_Init+0x32c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d007      	beq.n	8002d6a <HAL_GPIO_Init+0x20e>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a4b      	ldr	r2, [pc, #300]	@ (8002e8c <HAL_GPIO_Init+0x330>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d101      	bne.n	8002d66 <HAL_GPIO_Init+0x20a>
 8002d62:	2307      	movs	r3, #7
 8002d64:	e00e      	b.n	8002d84 <HAL_GPIO_Init+0x228>
 8002d66:	2308      	movs	r3, #8
 8002d68:	e00c      	b.n	8002d84 <HAL_GPIO_Init+0x228>
 8002d6a:	2306      	movs	r3, #6
 8002d6c:	e00a      	b.n	8002d84 <HAL_GPIO_Init+0x228>
 8002d6e:	2305      	movs	r3, #5
 8002d70:	e008      	b.n	8002d84 <HAL_GPIO_Init+0x228>
 8002d72:	2304      	movs	r3, #4
 8002d74:	e006      	b.n	8002d84 <HAL_GPIO_Init+0x228>
 8002d76:	2303      	movs	r3, #3
 8002d78:	e004      	b.n	8002d84 <HAL_GPIO_Init+0x228>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e002      	b.n	8002d84 <HAL_GPIO_Init+0x228>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <HAL_GPIO_Init+0x228>
 8002d82:	2300      	movs	r3, #0
 8002d84:	69fa      	ldr	r2, [r7, #28]
 8002d86:	f002 0203 	and.w	r2, r2, #3
 8002d8a:	0092      	lsls	r2, r2, #2
 8002d8c:	4093      	lsls	r3, r2
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d94:	4935      	ldr	r1, [pc, #212]	@ (8002e6c <HAL_GPIO_Init+0x310>)
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	089b      	lsrs	r3, r3, #2
 8002d9a:	3302      	adds	r3, #2
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002da2:	4b3b      	ldr	r3, [pc, #236]	@ (8002e90 <HAL_GPIO_Init+0x334>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	43db      	mvns	r3, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4013      	ands	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dc6:	4a32      	ldr	r2, [pc, #200]	@ (8002e90 <HAL_GPIO_Init+0x334>)
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dcc:	4b30      	ldr	r3, [pc, #192]	@ (8002e90 <HAL_GPIO_Init+0x334>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002df0:	4a27      	ldr	r2, [pc, #156]	@ (8002e90 <HAL_GPIO_Init+0x334>)
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002df6:	4b26      	ldr	r3, [pc, #152]	@ (8002e90 <HAL_GPIO_Init+0x334>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4013      	ands	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e1a:	4a1d      	ldr	r2, [pc, #116]	@ (8002e90 <HAL_GPIO_Init+0x334>)
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e20:	4b1b      	ldr	r3, [pc, #108]	@ (8002e90 <HAL_GPIO_Init+0x334>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e44:	4a12      	ldr	r2, [pc, #72]	@ (8002e90 <HAL_GPIO_Init+0x334>)
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	61fb      	str	r3, [r7, #28]
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	2b0f      	cmp	r3, #15
 8002e54:	f67f ae90 	bls.w	8002b78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e58:	bf00      	nop
 8002e5a:	bf00      	nop
 8002e5c:	3724      	adds	r7, #36	@ 0x24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40013800 	.word	0x40013800
 8002e70:	40020000 	.word	0x40020000
 8002e74:	40020400 	.word	0x40020400
 8002e78:	40020800 	.word	0x40020800
 8002e7c:	40020c00 	.word	0x40020c00
 8002e80:	40021000 	.word	0x40021000
 8002e84:	40021400 	.word	0x40021400
 8002e88:	40021800 	.word	0x40021800
 8002e8c:	40021c00 	.word	0x40021c00
 8002e90:	40013c00 	.word	0x40013c00

08002e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	807b      	strh	r3, [r7, #2]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ea4:	787b      	ldrb	r3, [r7, #1]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eaa:	887a      	ldrh	r2, [r7, #2]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002eb0:	e003      	b.n	8002eba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eb2:	887b      	ldrh	r3, [r7, #2]
 8002eb4:	041a      	lsls	r2, r3, #16
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	619a      	str	r2, [r3, #24]
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b085      	sub	sp, #20
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	460b      	mov	r3, r1
 8002ed0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ed8:	887a      	ldrh	r2, [r7, #2]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4013      	ands	r3, r2
 8002ede:	041a      	lsls	r2, r3, #16
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	43d9      	mvns	r1, r3
 8002ee4:	887b      	ldrh	r3, [r7, #2]
 8002ee6:	400b      	ands	r3, r1
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	619a      	str	r2, [r3, #24]
}
 8002eee:	bf00      	nop
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b086      	sub	sp, #24
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f002 ff83 	bl	8005e1c <USB_GetMode>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	f040 80fb 	bne.w	8003114 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f002 ff46 	bl	8005db4 <USB_ReadInterrupts>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 80f1 	beq.w	8003112 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f002 ff3d 	bl	8005db4 <USB_ReadInterrupts>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f44:	d104      	bne.n	8002f50 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002f4e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f002 ff2d 	bl	8005db4 <USB_ReadInterrupts>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f64:	d104      	bne.n	8002f70 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002f6e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f002 ff1d 	bl	8005db4 <USB_ReadInterrupts>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f84:	d104      	bne.n	8002f90 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002f8e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f002 ff0d 	bl	8005db4 <USB_ReadInterrupts>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d103      	bne.n	8002fac <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2202      	movs	r2, #2
 8002faa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f002 feff 	bl	8005db4 <USB_ReadInterrupts>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fc0:	d120      	bne.n	8003004 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002fca:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d113      	bne.n	8003004 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002fdc:	2110      	movs	r1, #16
 8002fde:	6938      	ldr	r0, [r7, #16]
 8002fe0:	f002 fe30 	bl	8005c44 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002fe4:	6938      	ldr	r0, [r7, #16]
 8002fe6:	f002 fe5f 	bl	8005ca8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	7a5b      	ldrb	r3, [r3, #9]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d105      	bne.n	8002ffe <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f002 ff1d 	bl	8005e38 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f003 f9d5 	bl	80063ae <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f002 fed3 	bl	8005db4 <USB_ReadInterrupts>
 800300e:	4603      	mov	r3, r0
 8003010:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003014:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003018:	d102      	bne.n	8003020 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f001 fca1 	bl	8004962 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f002 fec5 	bl	8005db4 <USB_ReadInterrupts>
 800302a:	4603      	mov	r3, r0
 800302c:	f003 0308 	and.w	r3, r3, #8
 8003030:	2b08      	cmp	r3, #8
 8003032:	d106      	bne.n	8003042 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f003 f99e 	bl	8006376 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2208      	movs	r2, #8
 8003040:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4618      	mov	r0, r3
 8003048:	f002 feb4 	bl	8005db4 <USB_ReadInterrupts>
 800304c:	4603      	mov	r3, r0
 800304e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003052:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003056:	d139      	bne.n	80030cc <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f002 ff28 	bl	8005eb2 <USB_HC_ReadInterrupt>
 8003062:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	e025      	b.n	80030b6 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f003 030f 	and.w	r3, r3, #15
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	fa22 f303 	lsr.w	r3, r2, r3
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d018      	beq.n	80030b0 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	015a      	lsls	r2, r3, #5
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4413      	add	r3, r2
 8003086:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003090:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003094:	d106      	bne.n	80030a4 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	b2db      	uxtb	r3, r3
 800309a:	4619      	mov	r1, r3
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f859 	bl	8003154 <HCD_HC_IN_IRQHandler>
 80030a2:	e005      	b.n	80030b0 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	4619      	mov	r1, r3
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 febb 	bl	8003e26 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	3301      	adds	r3, #1
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	795b      	ldrb	r3, [r3, #5]
 80030ba:	461a      	mov	r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	4293      	cmp	r3, r2
 80030c0:	d3d3      	bcc.n	800306a <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80030ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f002 fe6f 	bl	8005db4 <USB_ReadInterrupts>
 80030d6:	4603      	mov	r3, r0
 80030d8:	f003 0310 	and.w	r3, r3, #16
 80030dc:	2b10      	cmp	r3, #16
 80030de:	d101      	bne.n	80030e4 <HAL_HCD_IRQHandler+0x1ea>
 80030e0:	2301      	movs	r3, #1
 80030e2:	e000      	b.n	80030e6 <HAL_HCD_IRQHandler+0x1ec>
 80030e4:	2300      	movs	r3, #0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d014      	beq.n	8003114 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	699a      	ldr	r2, [r3, #24]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0210 	bic.w	r2, r2, #16
 80030f8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f001 fb52 	bl	80047a4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699a      	ldr	r2, [r3, #24]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0210 	orr.w	r2, r2, #16
 800310e:	619a      	str	r2, [r3, #24]
 8003110:	e000      	b.n	8003114 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003112:	bf00      	nop
    }
  }
}
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b082      	sub	sp, #8
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003128:	2b01      	cmp	r3, #1
 800312a:	d101      	bne.n	8003130 <HAL_HCD_Stop+0x16>
 800312c:	2302      	movs	r3, #2
 800312e:	e00d      	b.n	800314c <HAL_HCD_Stop+0x32>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f002 ffe9 	bl	8006114 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	78fa      	ldrb	r2, [r7, #3]
 8003170:	4611      	mov	r1, r2
 8003172:	4618      	mov	r0, r3
 8003174:	f002 fe31 	bl	8005dda <USB_ReadChInterrupts>
 8003178:	4603      	mov	r3, r0
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	2b04      	cmp	r3, #4
 8003180:	d11a      	bne.n	80031b8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003182:	78fb      	ldrb	r3, [r7, #3]
 8003184:	015a      	lsls	r2, r3, #5
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	4413      	add	r3, r2
 800318a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800318e:	461a      	mov	r2, r3
 8003190:	2304      	movs	r3, #4
 8003192:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	334d      	adds	r3, #77	@ 0x4d
 80031a4:	2207      	movs	r2, #7
 80031a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	78fa      	ldrb	r2, [r7, #3]
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f002 fe8f 	bl	8005ed4 <USB_HC_Halt>
 80031b6:	e09e      	b.n	80032f6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	78fa      	ldrb	r2, [r7, #3]
 80031be:	4611      	mov	r1, r2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f002 fe0a 	bl	8005dda <USB_ReadChInterrupts>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031d0:	d11b      	bne.n	800320a <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80031d2:	78fb      	ldrb	r3, [r7, #3]
 80031d4:	015a      	lsls	r2, r3, #5
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	4413      	add	r3, r2
 80031da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031de:	461a      	mov	r2, r3
 80031e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80031e6:	78fa      	ldrb	r2, [r7, #3]
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	1a9b      	subs	r3, r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	334d      	adds	r3, #77	@ 0x4d
 80031f6:	2208      	movs	r2, #8
 80031f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	4611      	mov	r1, r2
 8003202:	4618      	mov	r0, r3
 8003204:	f002 fe66 	bl	8005ed4 <USB_HC_Halt>
 8003208:	e075      	b.n	80032f6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	78fa      	ldrb	r2, [r7, #3]
 8003210:	4611      	mov	r1, r2
 8003212:	4618      	mov	r0, r3
 8003214:	f002 fde1 	bl	8005dda <USB_ReadChInterrupts>
 8003218:	4603      	mov	r3, r0
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b08      	cmp	r3, #8
 8003220:	d11a      	bne.n	8003258 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003222:	78fb      	ldrb	r3, [r7, #3]
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4413      	add	r3, r2
 800322a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800322e:	461a      	mov	r2, r3
 8003230:	2308      	movs	r3, #8
 8003232:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003234:	78fa      	ldrb	r2, [r7, #3]
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	1a9b      	subs	r3, r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	334d      	adds	r3, #77	@ 0x4d
 8003244:	2206      	movs	r2, #6
 8003246:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	78fa      	ldrb	r2, [r7, #3]
 800324e:	4611      	mov	r1, r2
 8003250:	4618      	mov	r0, r3
 8003252:	f002 fe3f 	bl	8005ed4 <USB_HC_Halt>
 8003256:	e04e      	b.n	80032f6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	78fa      	ldrb	r2, [r7, #3]
 800325e:	4611      	mov	r1, r2
 8003260:	4618      	mov	r0, r3
 8003262:	f002 fdba 	bl	8005dda <USB_ReadChInterrupts>
 8003266:	4603      	mov	r3, r0
 8003268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800326c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003270:	d11b      	bne.n	80032aa <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003272:	78fb      	ldrb	r3, [r7, #3]
 8003274:	015a      	lsls	r2, r3, #5
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4413      	add	r3, r2
 800327a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800327e:	461a      	mov	r2, r3
 8003280:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003284:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003286:	78fa      	ldrb	r2, [r7, #3]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	1a9b      	subs	r3, r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	334d      	adds	r3, #77	@ 0x4d
 8003296:	2209      	movs	r2, #9
 8003298:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	78fa      	ldrb	r2, [r7, #3]
 80032a0:	4611      	mov	r1, r2
 80032a2:	4618      	mov	r0, r3
 80032a4:	f002 fe16 	bl	8005ed4 <USB_HC_Halt>
 80032a8:	e025      	b.n	80032f6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	4611      	mov	r1, r2
 80032b2:	4618      	mov	r0, r3
 80032b4:	f002 fd91 	bl	8005dda <USB_ReadChInterrupts>
 80032b8:	4603      	mov	r3, r0
 80032ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032be:	2b80      	cmp	r3, #128	@ 0x80
 80032c0:	d119      	bne.n	80032f6 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80032c2:	78fb      	ldrb	r3, [r7, #3]
 80032c4:	015a      	lsls	r2, r3, #5
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4413      	add	r3, r2
 80032ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032ce:	461a      	mov	r2, r3
 80032d0:	2380      	movs	r3, #128	@ 0x80
 80032d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80032d4:	78fa      	ldrb	r2, [r7, #3]
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	4613      	mov	r3, r2
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	334d      	adds	r3, #77	@ 0x4d
 80032e4:	2207      	movs	r2, #7
 80032e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	78fa      	ldrb	r2, [r7, #3]
 80032ee:	4611      	mov	r1, r2
 80032f0:	4618      	mov	r0, r3
 80032f2:	f002 fdef 	bl	8005ed4 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	78fa      	ldrb	r2, [r7, #3]
 80032fc:	4611      	mov	r1, r2
 80032fe:	4618      	mov	r0, r3
 8003300:	f002 fd6b 	bl	8005dda <USB_ReadChInterrupts>
 8003304:	4603      	mov	r3, r0
 8003306:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800330a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800330e:	d112      	bne.n	8003336 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	4611      	mov	r1, r2
 8003318:	4618      	mov	r0, r3
 800331a:	f002 fddb 	bl	8005ed4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800331e:	78fb      	ldrb	r3, [r7, #3]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4413      	add	r3, r2
 8003326:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800332a:	461a      	mov	r2, r3
 800332c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003330:	6093      	str	r3, [r2, #8]
 8003332:	f000 bd75 	b.w	8003e20 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	4611      	mov	r1, r2
 800333e:	4618      	mov	r0, r3
 8003340:	f002 fd4b 	bl	8005dda <USB_ReadChInterrupts>
 8003344:	4603      	mov	r3, r0
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b01      	cmp	r3, #1
 800334c:	f040 8128 	bne.w	80035a0 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	4413      	add	r3, r2
 8003358:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800335c:	461a      	mov	r2, r3
 800335e:	2320      	movs	r3, #32
 8003360:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003362:	78fa      	ldrb	r2, [r7, #3]
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	1a9b      	subs	r3, r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	440b      	add	r3, r1
 8003370:	331b      	adds	r3, #27
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d119      	bne.n	80033ac <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003378:	78fa      	ldrb	r2, [r7, #3]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	331b      	adds	r3, #27
 8003388:	2200      	movs	r2, #0
 800338a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800338c:	78fb      	ldrb	r3, [r7, #3]
 800338e:	015a      	lsls	r2, r3, #5
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	4413      	add	r3, r2
 8003394:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	78fa      	ldrb	r2, [r7, #3]
 800339c:	0151      	lsls	r1, r2, #5
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	440a      	add	r2, r1
 80033a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033aa:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	799b      	ldrb	r3, [r3, #6]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d01b      	beq.n	80033ec <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80033b4:	78fa      	ldrb	r2, [r7, #3]
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	3330      	adds	r3, #48	@ 0x30
 80033c4:	6819      	ldr	r1, [r3, #0]
 80033c6:	78fb      	ldrb	r3, [r7, #3]
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d8:	78fa      	ldrb	r2, [r7, #3]
 80033da:	1ac9      	subs	r1, r1, r3
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4403      	add	r3, r0
 80033e8:	3338      	adds	r3, #56	@ 0x38
 80033ea:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80033ec:	78fa      	ldrb	r2, [r7, #3]
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	4613      	mov	r3, r2
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	334d      	adds	r3, #77	@ 0x4d
 80033fc:	2201      	movs	r2, #1
 80033fe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003400:	78fa      	ldrb	r2, [r7, #3]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	3344      	adds	r3, #68	@ 0x44
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4413      	add	r3, r2
 800341c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003420:	461a      	mov	r2, r3
 8003422:	2301      	movs	r3, #1
 8003424:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	3326      	adds	r3, #38	@ 0x26
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00a      	beq.n	8003452 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800343c:	78fa      	ldrb	r2, [r7, #3]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	3326      	adds	r3, #38	@ 0x26
 800344c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800344e:	2b02      	cmp	r3, #2
 8003450:	d110      	bne.n	8003474 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	78fa      	ldrb	r2, [r7, #3]
 8003458:	4611      	mov	r1, r2
 800345a:	4618      	mov	r0, r3
 800345c:	f002 fd3a 	bl	8005ed4 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	015a      	lsls	r2, r3, #5
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	4413      	add	r3, r2
 8003468:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800346c:	461a      	mov	r2, r3
 800346e:	2310      	movs	r3, #16
 8003470:	6093      	str	r3, [r2, #8]
 8003472:	e03d      	b.n	80034f0 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	3326      	adds	r3, #38	@ 0x26
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b03      	cmp	r3, #3
 8003488:	d00a      	beq.n	80034a0 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800348a:	78fa      	ldrb	r2, [r7, #3]
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	1a9b      	subs	r3, r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	3326      	adds	r3, #38	@ 0x26
 800349a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800349c:	2b01      	cmp	r3, #1
 800349e:	d127      	bne.n	80034f0 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	78fa      	ldrb	r2, [r7, #3]
 80034b0:	0151      	lsls	r1, r2, #5
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	440a      	add	r2, r1
 80034b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80034ba:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80034be:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80034c0:	78fa      	ldrb	r2, [r7, #3]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	334c      	adds	r3, #76	@ 0x4c
 80034d0:	2201      	movs	r2, #1
 80034d2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80034d4:	78fa      	ldrb	r2, [r7, #3]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	334c      	adds	r3, #76	@ 0x4c
 80034e4:	781a      	ldrb	r2, [r3, #0]
 80034e6:	78fb      	ldrb	r3, [r7, #3]
 80034e8:	4619      	mov	r1, r3
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f002 ff6d 	bl	80063ca <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	799b      	ldrb	r3, [r3, #6]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d13b      	bne.n	8003570 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80034f8:	78fa      	ldrb	r2, [r7, #3]
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	1a9b      	subs	r3, r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	3338      	adds	r3, #56	@ 0x38
 8003508:	6819      	ldr	r1, [r3, #0]
 800350a:	78fa      	ldrb	r2, [r7, #3]
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	4613      	mov	r3, r2
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	1a9b      	subs	r3, r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4403      	add	r3, r0
 8003518:	3328      	adds	r3, #40	@ 0x28
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	440b      	add	r3, r1
 800351e:	1e59      	subs	r1, r3, #1
 8003520:	78fa      	ldrb	r2, [r7, #3]
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	4613      	mov	r3, r2
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4403      	add	r3, r0
 800352e:	3328      	adds	r3, #40	@ 0x28
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	fbb1 f3f3 	udiv	r3, r1, r3
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 8470 	beq.w	8003e20 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003540:	78fa      	ldrb	r2, [r7, #3]
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	1a9b      	subs	r3, r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	333c      	adds	r3, #60	@ 0x3c
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	78fa      	ldrb	r2, [r7, #3]
 8003554:	f083 0301 	eor.w	r3, r3, #1
 8003558:	b2d8      	uxtb	r0, r3
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	333c      	adds	r3, #60	@ 0x3c
 8003568:	4602      	mov	r2, r0
 800356a:	701a      	strb	r2, [r3, #0]
 800356c:	f000 bc58 	b.w	8003e20 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003570:	78fa      	ldrb	r2, [r7, #3]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	333c      	adds	r3, #60	@ 0x3c
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	78fa      	ldrb	r2, [r7, #3]
 8003584:	f083 0301 	eor.w	r3, r3, #1
 8003588:	b2d8      	uxtb	r0, r3
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	333c      	adds	r3, #60	@ 0x3c
 8003598:	4602      	mov	r2, r0
 800359a:	701a      	strb	r2, [r3, #0]
 800359c:	f000 bc40 	b.w	8003e20 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	78fa      	ldrb	r2, [r7, #3]
 80035a6:	4611      	mov	r1, r2
 80035a8:	4618      	mov	r0, r3
 80035aa:	f002 fc16 	bl	8005dda <USB_ReadChInterrupts>
 80035ae:	4603      	mov	r3, r0
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b20      	cmp	r3, #32
 80035b6:	d131      	bne.n	800361c <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035c4:	461a      	mov	r2, r3
 80035c6:	2320      	movs	r3, #32
 80035c8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80035ca:	78fa      	ldrb	r2, [r7, #3]
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	1a9b      	subs	r3, r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	440b      	add	r3, r1
 80035d8:	331a      	adds	r3, #26
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	f040 841f 	bne.w	8003e20 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80035e2:	78fa      	ldrb	r2, [r7, #3]
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	1a9b      	subs	r3, r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	331b      	adds	r3, #27
 80035f2:	2201      	movs	r2, #1
 80035f4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80035f6:	78fa      	ldrb	r2, [r7, #3]
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	1a9b      	subs	r3, r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	334d      	adds	r3, #77	@ 0x4d
 8003606:	2203      	movs	r2, #3
 8003608:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	78fa      	ldrb	r2, [r7, #3]
 8003610:	4611      	mov	r1, r2
 8003612:	4618      	mov	r0, r3
 8003614:	f002 fc5e 	bl	8005ed4 <USB_HC_Halt>
 8003618:	f000 bc02 	b.w	8003e20 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	78fa      	ldrb	r2, [r7, #3]
 8003622:	4611      	mov	r1, r2
 8003624:	4618      	mov	r0, r3
 8003626:	f002 fbd8 	bl	8005dda <USB_ReadChInterrupts>
 800362a:	4603      	mov	r3, r0
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b02      	cmp	r3, #2
 8003632:	f040 8305 	bne.w	8003c40 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003636:	78fb      	ldrb	r3, [r7, #3]
 8003638:	015a      	lsls	r2, r3, #5
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	4413      	add	r3, r2
 800363e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003642:	461a      	mov	r2, r3
 8003644:	2302      	movs	r3, #2
 8003646:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003648:	78fa      	ldrb	r2, [r7, #3]
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	1a9b      	subs	r3, r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	334d      	adds	r3, #77	@ 0x4d
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d114      	bne.n	8003688 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800365e:	78fa      	ldrb	r2, [r7, #3]
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	1a9b      	subs	r3, r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	334d      	adds	r3, #77	@ 0x4d
 800366e:	2202      	movs	r2, #2
 8003670:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003672:	78fa      	ldrb	r2, [r7, #3]
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	1a9b      	subs	r3, r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	440b      	add	r3, r1
 8003680:	334c      	adds	r3, #76	@ 0x4c
 8003682:	2201      	movs	r2, #1
 8003684:	701a      	strb	r2, [r3, #0]
 8003686:	e2cc      	b.n	8003c22 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003688:	78fa      	ldrb	r2, [r7, #3]
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	4613      	mov	r3, r2
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	1a9b      	subs	r3, r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	334d      	adds	r3, #77	@ 0x4d
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	2b06      	cmp	r3, #6
 800369c:	d114      	bne.n	80036c8 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800369e:	78fa      	ldrb	r2, [r7, #3]
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	4613      	mov	r3, r2
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	1a9b      	subs	r3, r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	440b      	add	r3, r1
 80036ac:	334d      	adds	r3, #77	@ 0x4d
 80036ae:	2202      	movs	r2, #2
 80036b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80036b2:	78fa      	ldrb	r2, [r7, #3]
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	4613      	mov	r3, r2
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	440b      	add	r3, r1
 80036c0:	334c      	adds	r3, #76	@ 0x4c
 80036c2:	2205      	movs	r2, #5
 80036c4:	701a      	strb	r2, [r3, #0]
 80036c6:	e2ac      	b.n	8003c22 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80036c8:	78fa      	ldrb	r2, [r7, #3]
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	334d      	adds	r3, #77	@ 0x4d
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b07      	cmp	r3, #7
 80036dc:	d00b      	beq.n	80036f6 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80036de:	78fa      	ldrb	r2, [r7, #3]
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	1a9b      	subs	r3, r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	334d      	adds	r3, #77	@ 0x4d
 80036ee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80036f0:	2b09      	cmp	r3, #9
 80036f2:	f040 80a6 	bne.w	8003842 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036f6:	78fa      	ldrb	r2, [r7, #3]
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	334d      	adds	r3, #77	@ 0x4d
 8003706:	2202      	movs	r2, #2
 8003708:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800370a:	78fa      	ldrb	r2, [r7, #3]
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	4613      	mov	r3, r2
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	3344      	adds	r3, #68	@ 0x44
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	1c59      	adds	r1, r3, #1
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4403      	add	r3, r0
 800372a:	3344      	adds	r3, #68	@ 0x44
 800372c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800372e:	78fa      	ldrb	r2, [r7, #3]
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	1a9b      	subs	r3, r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	440b      	add	r3, r1
 800373c:	3344      	adds	r3, #68	@ 0x44
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2b02      	cmp	r3, #2
 8003742:	d943      	bls.n	80037cc <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003744:	78fa      	ldrb	r2, [r7, #3]
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	4613      	mov	r3, r2
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	1a9b      	subs	r3, r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	3344      	adds	r3, #68	@ 0x44
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003758:	78fa      	ldrb	r2, [r7, #3]
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	4613      	mov	r3, r2
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	1a9b      	subs	r3, r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	331a      	adds	r3, #26
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d123      	bne.n	80037b6 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800376e:	78fa      	ldrb	r2, [r7, #3]
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	4613      	mov	r3, r2
 8003774:	011b      	lsls	r3, r3, #4
 8003776:	1a9b      	subs	r3, r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	440b      	add	r3, r1
 800377c:	331b      	adds	r3, #27
 800377e:	2200      	movs	r2, #0
 8003780:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003782:	78fa      	ldrb	r2, [r7, #3]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	1a9b      	subs	r3, r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	331c      	adds	r3, #28
 8003792:	2200      	movs	r2, #0
 8003794:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003796:	78fb      	ldrb	r3, [r7, #3]
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4413      	add	r3, r2
 800379e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	78fa      	ldrb	r2, [r7, #3]
 80037a6:	0151      	lsls	r1, r2, #5
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	440a      	add	r2, r1
 80037ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80037b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037b4:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80037b6:	78fa      	ldrb	r2, [r7, #3]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	1a9b      	subs	r3, r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	334c      	adds	r3, #76	@ 0x4c
 80037c6:	2204      	movs	r2, #4
 80037c8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80037ca:	e229      	b.n	8003c20 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037cc:	78fa      	ldrb	r2, [r7, #3]
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	4613      	mov	r3, r2
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	1a9b      	subs	r3, r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	334c      	adds	r3, #76	@ 0x4c
 80037dc:	2202      	movs	r2, #2
 80037de:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80037e0:	78fa      	ldrb	r2, [r7, #3]
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	3326      	adds	r3, #38	@ 0x26
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00b      	beq.n	800380e <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80037f6:	78fa      	ldrb	r2, [r7, #3]
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	3326      	adds	r3, #38	@ 0x26
 8003806:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003808:	2b02      	cmp	r3, #2
 800380a:	f040 8209 	bne.w	8003c20 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800380e:	78fb      	ldrb	r3, [r7, #3]
 8003810:	015a      	lsls	r2, r3, #5
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	4413      	add	r3, r2
 8003816:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003824:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800382c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800382e:	78fb      	ldrb	r3, [r7, #3]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	4413      	add	r3, r2
 8003836:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800383a:	461a      	mov	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003840:	e1ee      	b.n	8003c20 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003842:	78fa      	ldrb	r2, [r7, #3]
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	334d      	adds	r3, #77	@ 0x4d
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b05      	cmp	r3, #5
 8003856:	f040 80c8 	bne.w	80039ea <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800385a:	78fa      	ldrb	r2, [r7, #3]
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	1a9b      	subs	r3, r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	334d      	adds	r3, #77	@ 0x4d
 800386a:	2202      	movs	r2, #2
 800386c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800386e:	78fa      	ldrb	r2, [r7, #3]
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	4613      	mov	r3, r2
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	1a9b      	subs	r3, r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	331b      	adds	r3, #27
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b01      	cmp	r3, #1
 8003882:	f040 81ce 	bne.w	8003c22 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003886:	78fa      	ldrb	r2, [r7, #3]
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	1a9b      	subs	r3, r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	3326      	adds	r3, #38	@ 0x26
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b03      	cmp	r3, #3
 800389a:	d16b      	bne.n	8003974 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800389c:	78fa      	ldrb	r2, [r7, #3]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	3348      	adds	r3, #72	@ 0x48
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	1c59      	adds	r1, r3, #1
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	1a9b      	subs	r3, r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4403      	add	r3, r0
 80038bc:	3348      	adds	r3, #72	@ 0x48
 80038be:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80038c0:	78fa      	ldrb	r2, [r7, #3]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	3348      	adds	r3, #72	@ 0x48
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d943      	bls.n	800395e <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80038d6:	78fa      	ldrb	r2, [r7, #3]
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	4613      	mov	r3, r2
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	440b      	add	r3, r1
 80038e4:	3348      	adds	r3, #72	@ 0x48
 80038e6:	2200      	movs	r2, #0
 80038e8:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80038ea:	78fa      	ldrb	r2, [r7, #3]
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	1a9b      	subs	r3, r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	331b      	adds	r3, #27
 80038fa:	2200      	movs	r2, #0
 80038fc:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80038fe:	78fa      	ldrb	r2, [r7, #3]
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	4613      	mov	r3, r2
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	1a9b      	subs	r3, r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	3344      	adds	r3, #68	@ 0x44
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b02      	cmp	r3, #2
 8003912:	d809      	bhi.n	8003928 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003914:	78fa      	ldrb	r2, [r7, #3]
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	4613      	mov	r3, r2
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	1a9b      	subs	r3, r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	331c      	adds	r3, #28
 8003924:	2201      	movs	r2, #1
 8003926:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	015a      	lsls	r2, r3, #5
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	4413      	add	r3, r2
 8003930:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	78fa      	ldrb	r2, [r7, #3]
 8003938:	0151      	lsls	r1, r2, #5
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	440a      	add	r2, r1
 800393e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003942:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003946:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003948:	78fa      	ldrb	r2, [r7, #3]
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	1a9b      	subs	r3, r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	334c      	adds	r3, #76	@ 0x4c
 8003958:	2204      	movs	r2, #4
 800395a:	701a      	strb	r2, [r3, #0]
 800395c:	e014      	b.n	8003988 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800395e:	78fa      	ldrb	r2, [r7, #3]
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	1a9b      	subs	r3, r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	334c      	adds	r3, #76	@ 0x4c
 800396e:	2202      	movs	r2, #2
 8003970:	701a      	strb	r2, [r3, #0]
 8003972:	e009      	b.n	8003988 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003974:	78fa      	ldrb	r2, [r7, #3]
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	4613      	mov	r3, r2
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	1a9b      	subs	r3, r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	334c      	adds	r3, #76	@ 0x4c
 8003984:	2202      	movs	r2, #2
 8003986:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003988:	78fa      	ldrb	r2, [r7, #3]
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	4613      	mov	r3, r2
 800398e:	011b      	lsls	r3, r3, #4
 8003990:	1a9b      	subs	r3, r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	3326      	adds	r3, #38	@ 0x26
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00b      	beq.n	80039b6 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800399e:	78fa      	ldrb	r2, [r7, #3]
 80039a0:	6879      	ldr	r1, [r7, #4]
 80039a2:	4613      	mov	r3, r2
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	1a9b      	subs	r3, r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	3326      	adds	r3, #38	@ 0x26
 80039ae:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	f040 8136 	bne.w	8003c22 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80039b6:	78fb      	ldrb	r3, [r7, #3]
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80039cc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80039d4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80039d6:	78fb      	ldrb	r3, [r7, #3]
 80039d8:	015a      	lsls	r2, r3, #5
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	4413      	add	r3, r2
 80039de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039e2:	461a      	mov	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	e11b      	b.n	8003c22 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80039ea:	78fa      	ldrb	r2, [r7, #3]
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	4613      	mov	r3, r2
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	1a9b      	subs	r3, r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	440b      	add	r3, r1
 80039f8:	334d      	adds	r3, #77	@ 0x4d
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	f040 8081 	bne.w	8003b04 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a02:	78fa      	ldrb	r2, [r7, #3]
 8003a04:	6879      	ldr	r1, [r7, #4]
 8003a06:	4613      	mov	r3, r2
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	1a9b      	subs	r3, r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	440b      	add	r3, r1
 8003a10:	334d      	adds	r3, #77	@ 0x4d
 8003a12:	2202      	movs	r2, #2
 8003a14:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003a16:	78fa      	ldrb	r2, [r7, #3]
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	1a9b      	subs	r3, r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	440b      	add	r3, r1
 8003a24:	331b      	adds	r3, #27
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	f040 80fa 	bne.w	8003c22 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a2e:	78fa      	ldrb	r2, [r7, #3]
 8003a30:	6879      	ldr	r1, [r7, #4]
 8003a32:	4613      	mov	r3, r2
 8003a34:	011b      	lsls	r3, r3, #4
 8003a36:	1a9b      	subs	r3, r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	334c      	adds	r3, #76	@ 0x4c
 8003a3e:	2202      	movs	r2, #2
 8003a40:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003a42:	78fb      	ldrb	r3, [r7, #3]
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	78fa      	ldrb	r2, [r7, #3]
 8003a52:	0151      	lsls	r1, r2, #5
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	440a      	add	r2, r1
 8003a58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a60:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003a62:	78fb      	ldrb	r3, [r7, #3]
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	78fa      	ldrb	r2, [r7, #3]
 8003a72:	0151      	lsls	r1, r2, #5
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	440a      	add	r2, r1
 8003a78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a80:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003a82:	78fb      	ldrb	r3, [r7, #3]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	78fa      	ldrb	r2, [r7, #3]
 8003a92:	0151      	lsls	r1, r2, #5
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	440a      	add	r2, r1
 8003a98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a9c:	f023 0320 	bic.w	r3, r3, #32
 8003aa0:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003aa2:	78fa      	ldrb	r2, [r7, #3]
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	1a9b      	subs	r3, r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	440b      	add	r3, r1
 8003ab0:	3326      	adds	r3, #38	@ 0x26
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00b      	beq.n	8003ad0 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ab8:	78fa      	ldrb	r2, [r7, #3]
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	4613      	mov	r3, r2
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	1a9b      	subs	r3, r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	3326      	adds	r3, #38	@ 0x26
 8003ac8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	f040 80a9 	bne.w	8003c22 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003ad0:	78fb      	ldrb	r3, [r7, #3]
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ae6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003aee:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003af0:	78fb      	ldrb	r3, [r7, #3]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003afc:	461a      	mov	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	e08e      	b.n	8003c22 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003b04:	78fa      	ldrb	r2, [r7, #3]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	1a9b      	subs	r3, r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	334d      	adds	r3, #77	@ 0x4d
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d143      	bne.n	8003ba2 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b1a:	78fa      	ldrb	r2, [r7, #3]
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	1a9b      	subs	r3, r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	440b      	add	r3, r1
 8003b28:	334d      	adds	r3, #77	@ 0x4d
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b2e:	78fa      	ldrb	r2, [r7, #3]
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	4613      	mov	r3, r2
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	1a9b      	subs	r3, r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	440b      	add	r3, r1
 8003b3c:	334c      	adds	r3, #76	@ 0x4c
 8003b3e:	2202      	movs	r2, #2
 8003b40:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b42:	78fa      	ldrb	r2, [r7, #3]
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	4613      	mov	r3, r2
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	1a9b      	subs	r3, r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	440b      	add	r3, r1
 8003b50:	3326      	adds	r3, #38	@ 0x26
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00a      	beq.n	8003b6e <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003b58:	78fa      	ldrb	r2, [r7, #3]
 8003b5a:	6879      	ldr	r1, [r7, #4]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	1a9b      	subs	r3, r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	440b      	add	r3, r1
 8003b66:	3326      	adds	r3, #38	@ 0x26
 8003b68:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d159      	bne.n	8003c22 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b6e:	78fb      	ldrb	r3, [r7, #3]
 8003b70:	015a      	lsls	r2, r3, #5
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b84:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b8c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b8e:	78fb      	ldrb	r3, [r7, #3]
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	e03f      	b.n	8003c22 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003ba2:	78fa      	ldrb	r2, [r7, #3]
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	1a9b      	subs	r3, r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	440b      	add	r3, r1
 8003bb0:	334d      	adds	r3, #77	@ 0x4d
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d126      	bne.n	8003c06 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003bb8:	78fa      	ldrb	r2, [r7, #3]
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	334d      	adds	r3, #77	@ 0x4d
 8003bc8:	2202      	movs	r2, #2
 8003bca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003bcc:	78fa      	ldrb	r2, [r7, #3]
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	1a9b      	subs	r3, r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	3344      	adds	r3, #68	@ 0x44
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	1c59      	adds	r1, r3, #1
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	4613      	mov	r3, r2
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	1a9b      	subs	r3, r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4403      	add	r3, r0
 8003bec:	3344      	adds	r3, #68	@ 0x44
 8003bee:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003bf0:	78fa      	ldrb	r2, [r7, #3]
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	1a9b      	subs	r3, r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	334c      	adds	r3, #76	@ 0x4c
 8003c00:	2204      	movs	r2, #4
 8003c02:	701a      	strb	r2, [r3, #0]
 8003c04:	e00d      	b.n	8003c22 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003c06:	78fa      	ldrb	r2, [r7, #3]
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	1a9b      	subs	r3, r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	440b      	add	r3, r1
 8003c14:	334d      	adds	r3, #77	@ 0x4d
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	f000 8100 	beq.w	8003e1e <HCD_HC_IN_IRQHandler+0xcca>
 8003c1e:	e000      	b.n	8003c22 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c20:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003c22:	78fa      	ldrb	r2, [r7, #3]
 8003c24:	6879      	ldr	r1, [r7, #4]
 8003c26:	4613      	mov	r3, r2
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	1a9b      	subs	r3, r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	440b      	add	r3, r1
 8003c30:	334c      	adds	r3, #76	@ 0x4c
 8003c32:	781a      	ldrb	r2, [r3, #0]
 8003c34:	78fb      	ldrb	r3, [r7, #3]
 8003c36:	4619      	mov	r1, r3
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f002 fbc6 	bl	80063ca <HAL_HCD_HC_NotifyURBChange_Callback>
 8003c3e:	e0ef      	b.n	8003e20 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	78fa      	ldrb	r2, [r7, #3]
 8003c46:	4611      	mov	r1, r2
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f002 f8c6 	bl	8005dda <USB_ReadChInterrupts>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c54:	2b40      	cmp	r3, #64	@ 0x40
 8003c56:	d12f      	bne.n	8003cb8 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003c58:	78fb      	ldrb	r3, [r7, #3]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c64:	461a      	mov	r2, r3
 8003c66:	2340      	movs	r3, #64	@ 0x40
 8003c68:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003c6a:	78fa      	ldrb	r2, [r7, #3]
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	1a9b      	subs	r3, r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	440b      	add	r3, r1
 8003c78:	334d      	adds	r3, #77	@ 0x4d
 8003c7a:	2205      	movs	r2, #5
 8003c7c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003c7e:	78fa      	ldrb	r2, [r7, #3]
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	1a9b      	subs	r3, r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	331a      	adds	r3, #26
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d109      	bne.n	8003ca8 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003c94:	78fa      	ldrb	r2, [r7, #3]
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	1a9b      	subs	r3, r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	3344      	adds	r3, #68	@ 0x44
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	78fa      	ldrb	r2, [r7, #3]
 8003cae:	4611      	mov	r1, r2
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f002 f90f 	bl	8005ed4 <USB_HC_Halt>
 8003cb6:	e0b3      	b.n	8003e20 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	78fa      	ldrb	r2, [r7, #3]
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f002 f88a 	bl	8005dda <USB_ReadChInterrupts>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	f003 0310 	and.w	r3, r3, #16
 8003ccc:	2b10      	cmp	r3, #16
 8003cce:	f040 80a7 	bne.w	8003e20 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003cd2:	78fa      	ldrb	r2, [r7, #3]
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	1a9b      	subs	r3, r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	440b      	add	r3, r1
 8003ce0:	3326      	adds	r3, #38	@ 0x26
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2b03      	cmp	r3, #3
 8003ce6:	d11b      	bne.n	8003d20 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003ce8:	78fa      	ldrb	r2, [r7, #3]
 8003cea:	6879      	ldr	r1, [r7, #4]
 8003cec:	4613      	mov	r3, r2
 8003cee:	011b      	lsls	r3, r3, #4
 8003cf0:	1a9b      	subs	r3, r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	3344      	adds	r3, #68	@ 0x44
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003cfc:	78fa      	ldrb	r2, [r7, #3]
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	4613      	mov	r3, r2
 8003d02:	011b      	lsls	r3, r3, #4
 8003d04:	1a9b      	subs	r3, r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	334d      	adds	r3, #77	@ 0x4d
 8003d0c:	2204      	movs	r2, #4
 8003d0e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	78fa      	ldrb	r2, [r7, #3]
 8003d16:	4611      	mov	r1, r2
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f002 f8db 	bl	8005ed4 <USB_HC_Halt>
 8003d1e:	e03f      	b.n	8003da0 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d20:	78fa      	ldrb	r2, [r7, #3]
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	4613      	mov	r3, r2
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	1a9b      	subs	r3, r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	3326      	adds	r3, #38	@ 0x26
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003d36:	78fa      	ldrb	r2, [r7, #3]
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	1a9b      	subs	r3, r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	440b      	add	r3, r1
 8003d44:	3326      	adds	r3, #38	@ 0x26
 8003d46:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d129      	bne.n	8003da0 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003d4c:	78fa      	ldrb	r2, [r7, #3]
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	4613      	mov	r3, r2
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	1a9b      	subs	r3, r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	3344      	adds	r3, #68	@ 0x44
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	799b      	ldrb	r3, [r3, #6]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00a      	beq.n	8003d7e <HCD_HC_IN_IRQHandler+0xc2a>
 8003d68:	78fa      	ldrb	r2, [r7, #3]
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	1a9b      	subs	r3, r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	331b      	adds	r3, #27
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d110      	bne.n	8003da0 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003d7e:	78fa      	ldrb	r2, [r7, #3]
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	4613      	mov	r3, r2
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	1a9b      	subs	r3, r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	334d      	adds	r3, #77	@ 0x4d
 8003d8e:	2204      	movs	r2, #4
 8003d90:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	78fa      	ldrb	r2, [r7, #3]
 8003d98:	4611      	mov	r1, r2
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f002 f89a 	bl	8005ed4 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003da0:	78fa      	ldrb	r2, [r7, #3]
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	4613      	mov	r3, r2
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	1a9b      	subs	r3, r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	331b      	adds	r3, #27
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d129      	bne.n	8003e0a <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003db6:	78fa      	ldrb	r2, [r7, #3]
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	1a9b      	subs	r3, r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	440b      	add	r3, r1
 8003dc4:	331b      	adds	r3, #27
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003dca:	78fb      	ldrb	r3, [r7, #3]
 8003dcc:	015a      	lsls	r2, r3, #5
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	78fa      	ldrb	r2, [r7, #3]
 8003dda:	0151      	lsls	r1, r2, #5
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	440a      	add	r2, r1
 8003de0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003de4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003de8:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003dea:	78fb      	ldrb	r3, [r7, #3]
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	78fa      	ldrb	r2, [r7, #3]
 8003dfa:	0151      	lsls	r1, r2, #5
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	440a      	add	r2, r1
 8003e00:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e04:	f043 0320 	orr.w	r3, r3, #32
 8003e08:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003e0a:	78fb      	ldrb	r3, [r7, #3]
 8003e0c:	015a      	lsls	r2, r3, #5
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	4413      	add	r3, r2
 8003e12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e16:	461a      	mov	r2, r3
 8003e18:	2310      	movs	r3, #16
 8003e1a:	6093      	str	r3, [r2, #8]
 8003e1c:	e000      	b.n	8003e20 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003e1e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003e20:	3718      	adds	r7, #24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b086      	sub	sp, #24
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
 8003e2e:	460b      	mov	r3, r1
 8003e30:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	78fa      	ldrb	r2, [r7, #3]
 8003e42:	4611      	mov	r1, r2
 8003e44:	4618      	mov	r0, r3
 8003e46:	f001 ffc8 	bl	8005dda <USB_ReadChInterrupts>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	d11b      	bne.n	8003e8c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003e54:	78fb      	ldrb	r3, [r7, #3]
 8003e56:	015a      	lsls	r2, r3, #5
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e60:	461a      	mov	r2, r3
 8003e62:	2304      	movs	r3, #4
 8003e64:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003e66:	78fa      	ldrb	r2, [r7, #3]
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	1a9b      	subs	r3, r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	440b      	add	r3, r1
 8003e74:	334d      	adds	r3, #77	@ 0x4d
 8003e76:	2207      	movs	r2, #7
 8003e78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	78fa      	ldrb	r2, [r7, #3]
 8003e80:	4611      	mov	r1, r2
 8003e82:	4618      	mov	r0, r3
 8003e84:	f002 f826 	bl	8005ed4 <USB_HC_Halt>
 8003e88:	f000 bc89 	b.w	800479e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	78fa      	ldrb	r2, [r7, #3]
 8003e92:	4611      	mov	r1, r2
 8003e94:	4618      	mov	r0, r3
 8003e96:	f001 ffa0 	bl	8005dda <USB_ReadChInterrupts>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	f003 0320 	and.w	r3, r3, #32
 8003ea0:	2b20      	cmp	r3, #32
 8003ea2:	f040 8082 	bne.w	8003faa <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003ea6:	78fb      	ldrb	r3, [r7, #3]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	2320      	movs	r3, #32
 8003eb6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003eb8:	78fa      	ldrb	r2, [r7, #3]
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	1a9b      	subs	r3, r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	3319      	adds	r3, #25
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d124      	bne.n	8003f18 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003ece:	78fa      	ldrb	r2, [r7, #3]
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	011b      	lsls	r3, r3, #4
 8003ed6:	1a9b      	subs	r3, r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	440b      	add	r3, r1
 8003edc:	3319      	adds	r3, #25
 8003ede:	2200      	movs	r2, #0
 8003ee0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ee2:	78fa      	ldrb	r2, [r7, #3]
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	011b      	lsls	r3, r3, #4
 8003eea:	1a9b      	subs	r3, r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	334c      	adds	r3, #76	@ 0x4c
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003ef6:	78fa      	ldrb	r2, [r7, #3]
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	4613      	mov	r3, r2
 8003efc:	011b      	lsls	r3, r3, #4
 8003efe:	1a9b      	subs	r3, r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	334d      	adds	r3, #77	@ 0x4d
 8003f06:	2203      	movs	r2, #3
 8003f08:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	78fa      	ldrb	r2, [r7, #3]
 8003f10:	4611      	mov	r1, r2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f001 ffde 	bl	8005ed4 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003f18:	78fa      	ldrb	r2, [r7, #3]
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	011b      	lsls	r3, r3, #4
 8003f20:	1a9b      	subs	r3, r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	440b      	add	r3, r1
 8003f26:	331a      	adds	r3, #26
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	f040 8437 	bne.w	800479e <HCD_HC_OUT_IRQHandler+0x978>
 8003f30:	78fa      	ldrb	r2, [r7, #3]
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	4613      	mov	r3, r2
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	1a9b      	subs	r3, r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	331b      	adds	r3, #27
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f040 842b 	bne.w	800479e <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003f48:	78fa      	ldrb	r2, [r7, #3]
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	1a9b      	subs	r3, r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	3326      	adds	r3, #38	@ 0x26
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d009      	beq.n	8003f72 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003f5e:	78fa      	ldrb	r2, [r7, #3]
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	4613      	mov	r3, r2
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	1a9b      	subs	r3, r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	440b      	add	r3, r1
 8003f6c:	331b      	adds	r3, #27
 8003f6e:	2201      	movs	r2, #1
 8003f70:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003f72:	78fa      	ldrb	r2, [r7, #3]
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	4613      	mov	r3, r2
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	1a9b      	subs	r3, r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	440b      	add	r3, r1
 8003f80:	334d      	adds	r3, #77	@ 0x4d
 8003f82:	2203      	movs	r2, #3
 8003f84:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	78fa      	ldrb	r2, [r7, #3]
 8003f8c:	4611      	mov	r1, r2
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f001 ffa0 	bl	8005ed4 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003f94:	78fa      	ldrb	r2, [r7, #3]
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	011b      	lsls	r3, r3, #4
 8003f9c:	1a9b      	subs	r3, r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	3344      	adds	r3, #68	@ 0x44
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	e3f9      	b.n	800479e <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	78fa      	ldrb	r2, [r7, #3]
 8003fb0:	4611      	mov	r1, r2
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f001 ff11 	bl	8005dda <USB_ReadChInterrupts>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fc2:	d111      	bne.n	8003fe8 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003fc4:	78fb      	ldrb	r3, [r7, #3]
 8003fc6:	015a      	lsls	r2, r3, #5
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003fd6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	78fa      	ldrb	r2, [r7, #3]
 8003fde:	4611      	mov	r1, r2
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f001 ff77 	bl	8005ed4 <USB_HC_Halt>
 8003fe6:	e3da      	b.n	800479e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	78fa      	ldrb	r2, [r7, #3]
 8003fee:	4611      	mov	r1, r2
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f001 fef2 	bl	8005dda <USB_ReadChInterrupts>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d168      	bne.n	80040d2 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004000:	78fa      	ldrb	r2, [r7, #3]
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	4613      	mov	r3, r2
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	1a9b      	subs	r3, r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	3344      	adds	r3, #68	@ 0x44
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	78fa      	ldrb	r2, [r7, #3]
 800401a:	4611      	mov	r1, r2
 800401c:	4618      	mov	r0, r3
 800401e:	f001 fedc 	bl	8005dda <USB_ReadChInterrupts>
 8004022:	4603      	mov	r3, r0
 8004024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004028:	2b40      	cmp	r3, #64	@ 0x40
 800402a:	d112      	bne.n	8004052 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800402c:	78fa      	ldrb	r2, [r7, #3]
 800402e:	6879      	ldr	r1, [r7, #4]
 8004030:	4613      	mov	r3, r2
 8004032:	011b      	lsls	r3, r3, #4
 8004034:	1a9b      	subs	r3, r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	440b      	add	r3, r1
 800403a:	3319      	adds	r3, #25
 800403c:	2201      	movs	r2, #1
 800403e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004040:	78fb      	ldrb	r3, [r7, #3]
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	4413      	add	r3, r2
 8004048:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800404c:	461a      	mov	r2, r3
 800404e:	2340      	movs	r3, #64	@ 0x40
 8004050:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004052:	78fa      	ldrb	r2, [r7, #3]
 8004054:	6879      	ldr	r1, [r7, #4]
 8004056:	4613      	mov	r3, r2
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	1a9b      	subs	r3, r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	440b      	add	r3, r1
 8004060:	331b      	adds	r3, #27
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d019      	beq.n	800409c <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004068:	78fa      	ldrb	r2, [r7, #3]
 800406a:	6879      	ldr	r1, [r7, #4]
 800406c:	4613      	mov	r3, r2
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	1a9b      	subs	r3, r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	331b      	adds	r3, #27
 8004078:	2200      	movs	r2, #0
 800407a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800407c:	78fb      	ldrb	r3, [r7, #3]
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	4413      	add	r3, r2
 8004084:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	78fa      	ldrb	r2, [r7, #3]
 800408c:	0151      	lsls	r1, r2, #5
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	440a      	add	r2, r1
 8004092:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004096:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800409a:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	015a      	lsls	r2, r3, #5
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	4413      	add	r3, r2
 80040a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040a8:	461a      	mov	r2, r3
 80040aa:	2301      	movs	r3, #1
 80040ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80040ae:	78fa      	ldrb	r2, [r7, #3]
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	4613      	mov	r3, r2
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	1a9b      	subs	r3, r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	440b      	add	r3, r1
 80040bc:	334d      	adds	r3, #77	@ 0x4d
 80040be:	2201      	movs	r2, #1
 80040c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	78fa      	ldrb	r2, [r7, #3]
 80040c8:	4611      	mov	r1, r2
 80040ca:	4618      	mov	r0, r3
 80040cc:	f001 ff02 	bl	8005ed4 <USB_HC_Halt>
 80040d0:	e365      	b.n	800479e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	78fa      	ldrb	r2, [r7, #3]
 80040d8:	4611      	mov	r1, r2
 80040da:	4618      	mov	r0, r3
 80040dc:	f001 fe7d 	bl	8005dda <USB_ReadChInterrupts>
 80040e0:	4603      	mov	r3, r0
 80040e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e6:	2b40      	cmp	r3, #64	@ 0x40
 80040e8:	d139      	bne.n	800415e <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80040ea:	78fa      	ldrb	r2, [r7, #3]
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	4613      	mov	r3, r2
 80040f0:	011b      	lsls	r3, r3, #4
 80040f2:	1a9b      	subs	r3, r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	440b      	add	r3, r1
 80040f8:	334d      	adds	r3, #77	@ 0x4d
 80040fa:	2205      	movs	r2, #5
 80040fc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80040fe:	78fa      	ldrb	r2, [r7, #3]
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	4613      	mov	r3, r2
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	1a9b      	subs	r3, r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	440b      	add	r3, r1
 800410c:	331a      	adds	r3, #26
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d109      	bne.n	8004128 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004114:	78fa      	ldrb	r2, [r7, #3]
 8004116:	6879      	ldr	r1, [r7, #4]
 8004118:	4613      	mov	r3, r2
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	1a9b      	subs	r3, r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	440b      	add	r3, r1
 8004122:	3319      	adds	r3, #25
 8004124:	2201      	movs	r2, #1
 8004126:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004128:	78fa      	ldrb	r2, [r7, #3]
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	4613      	mov	r3, r2
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	1a9b      	subs	r3, r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	3344      	adds	r3, #68	@ 0x44
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	78fa      	ldrb	r2, [r7, #3]
 8004142:	4611      	mov	r1, r2
 8004144:	4618      	mov	r0, r3
 8004146:	f001 fec5 	bl	8005ed4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800414a:	78fb      	ldrb	r3, [r7, #3]
 800414c:	015a      	lsls	r2, r3, #5
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	4413      	add	r3, r2
 8004152:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004156:	461a      	mov	r2, r3
 8004158:	2340      	movs	r3, #64	@ 0x40
 800415a:	6093      	str	r3, [r2, #8]
 800415c:	e31f      	b.n	800479e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	78fa      	ldrb	r2, [r7, #3]
 8004164:	4611      	mov	r1, r2
 8004166:	4618      	mov	r0, r3
 8004168:	f001 fe37 	bl	8005dda <USB_ReadChInterrupts>
 800416c:	4603      	mov	r3, r0
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b08      	cmp	r3, #8
 8004174:	d11a      	bne.n	80041ac <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004176:	78fb      	ldrb	r3, [r7, #3]
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	4413      	add	r3, r2
 800417e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004182:	461a      	mov	r2, r3
 8004184:	2308      	movs	r3, #8
 8004186:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004188:	78fa      	ldrb	r2, [r7, #3]
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	4613      	mov	r3, r2
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	1a9b      	subs	r3, r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	334d      	adds	r3, #77	@ 0x4d
 8004198:	2206      	movs	r2, #6
 800419a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	78fa      	ldrb	r2, [r7, #3]
 80041a2:	4611      	mov	r1, r2
 80041a4:	4618      	mov	r0, r3
 80041a6:	f001 fe95 	bl	8005ed4 <USB_HC_Halt>
 80041aa:	e2f8      	b.n	800479e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	78fa      	ldrb	r2, [r7, #3]
 80041b2:	4611      	mov	r1, r2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f001 fe10 	bl	8005dda <USB_ReadChInterrupts>
 80041ba:	4603      	mov	r3, r0
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b10      	cmp	r3, #16
 80041c2:	d144      	bne.n	800424e <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80041c4:	78fa      	ldrb	r2, [r7, #3]
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	4613      	mov	r3, r2
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	1a9b      	subs	r3, r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	440b      	add	r3, r1
 80041d2:	3344      	adds	r3, #68	@ 0x44
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80041d8:	78fa      	ldrb	r2, [r7, #3]
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	4613      	mov	r3, r2
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	334d      	adds	r3, #77	@ 0x4d
 80041e8:	2204      	movs	r2, #4
 80041ea:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80041ec:	78fa      	ldrb	r2, [r7, #3]
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	4613      	mov	r3, r2
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	1a9b      	subs	r3, r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	3319      	adds	r3, #25
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d114      	bne.n	800422c <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004202:	78fa      	ldrb	r2, [r7, #3]
 8004204:	6879      	ldr	r1, [r7, #4]
 8004206:	4613      	mov	r3, r2
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	1a9b      	subs	r3, r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	440b      	add	r3, r1
 8004210:	3318      	adds	r3, #24
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d109      	bne.n	800422c <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004218:	78fa      	ldrb	r2, [r7, #3]
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	4613      	mov	r3, r2
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	1a9b      	subs	r3, r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	3319      	adds	r3, #25
 8004228:	2201      	movs	r2, #1
 800422a:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	78fa      	ldrb	r2, [r7, #3]
 8004232:	4611      	mov	r1, r2
 8004234:	4618      	mov	r0, r3
 8004236:	f001 fe4d 	bl	8005ed4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800423a:	78fb      	ldrb	r3, [r7, #3]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	4413      	add	r3, r2
 8004242:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004246:	461a      	mov	r2, r3
 8004248:	2310      	movs	r3, #16
 800424a:	6093      	str	r3, [r2, #8]
 800424c:	e2a7      	b.n	800479e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	78fa      	ldrb	r2, [r7, #3]
 8004254:	4611      	mov	r1, r2
 8004256:	4618      	mov	r0, r3
 8004258:	f001 fdbf 	bl	8005dda <USB_ReadChInterrupts>
 800425c:	4603      	mov	r3, r0
 800425e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004262:	2b80      	cmp	r3, #128	@ 0x80
 8004264:	f040 8083 	bne.w	800436e <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	799b      	ldrb	r3, [r3, #6]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d111      	bne.n	8004294 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004270:	78fa      	ldrb	r2, [r7, #3]
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	4613      	mov	r3, r2
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	1a9b      	subs	r3, r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	334d      	adds	r3, #77	@ 0x4d
 8004280:	2207      	movs	r2, #7
 8004282:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	78fa      	ldrb	r2, [r7, #3]
 800428a:	4611      	mov	r1, r2
 800428c:	4618      	mov	r0, r3
 800428e:	f001 fe21 	bl	8005ed4 <USB_HC_Halt>
 8004292:	e062      	b.n	800435a <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004294:	78fa      	ldrb	r2, [r7, #3]
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	4613      	mov	r3, r2
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	1a9b      	subs	r3, r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	440b      	add	r3, r1
 80042a2:	3344      	adds	r3, #68	@ 0x44
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	1c59      	adds	r1, r3, #1
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	4613      	mov	r3, r2
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	1a9b      	subs	r3, r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4403      	add	r3, r0
 80042b4:	3344      	adds	r3, #68	@ 0x44
 80042b6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80042b8:	78fa      	ldrb	r2, [r7, #3]
 80042ba:	6879      	ldr	r1, [r7, #4]
 80042bc:	4613      	mov	r3, r2
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	1a9b      	subs	r3, r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	440b      	add	r3, r1
 80042c6:	3344      	adds	r3, #68	@ 0x44
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d922      	bls.n	8004314 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80042ce:	78fa      	ldrb	r2, [r7, #3]
 80042d0:	6879      	ldr	r1, [r7, #4]
 80042d2:	4613      	mov	r3, r2
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	1a9b      	subs	r3, r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	440b      	add	r3, r1
 80042dc:	3344      	adds	r3, #68	@ 0x44
 80042de:	2200      	movs	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80042e2:	78fa      	ldrb	r2, [r7, #3]
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	4613      	mov	r3, r2
 80042e8:	011b      	lsls	r3, r3, #4
 80042ea:	1a9b      	subs	r3, r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	440b      	add	r3, r1
 80042f0:	334c      	adds	r3, #76	@ 0x4c
 80042f2:	2204      	movs	r2, #4
 80042f4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80042f6:	78fa      	ldrb	r2, [r7, #3]
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	1a9b      	subs	r3, r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	334c      	adds	r3, #76	@ 0x4c
 8004306:	781a      	ldrb	r2, [r3, #0]
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	4619      	mov	r1, r3
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f002 f85c 	bl	80063ca <HAL_HCD_HC_NotifyURBChange_Callback>
 8004312:	e022      	b.n	800435a <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004314:	78fa      	ldrb	r2, [r7, #3]
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	4613      	mov	r3, r2
 800431a:	011b      	lsls	r3, r3, #4
 800431c:	1a9b      	subs	r3, r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	334c      	adds	r3, #76	@ 0x4c
 8004324:	2202      	movs	r2, #2
 8004326:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004328:	78fb      	ldrb	r3, [r7, #3]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	4413      	add	r3, r2
 8004330:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800433e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004346:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004348:	78fb      	ldrb	r3, [r7, #3]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	4413      	add	r3, r2
 8004350:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004354:	461a      	mov	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800435a:	78fb      	ldrb	r3, [r7, #3]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	4413      	add	r3, r2
 8004362:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004366:	461a      	mov	r2, r3
 8004368:	2380      	movs	r3, #128	@ 0x80
 800436a:	6093      	str	r3, [r2, #8]
 800436c:	e217      	b.n	800479e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	78fa      	ldrb	r2, [r7, #3]
 8004374:	4611      	mov	r1, r2
 8004376:	4618      	mov	r0, r3
 8004378:	f001 fd2f 	bl	8005dda <USB_ReadChInterrupts>
 800437c:	4603      	mov	r3, r0
 800437e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004382:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004386:	d11b      	bne.n	80043c0 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004388:	78fa      	ldrb	r2, [r7, #3]
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	4613      	mov	r3, r2
 800438e:	011b      	lsls	r3, r3, #4
 8004390:	1a9b      	subs	r3, r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	440b      	add	r3, r1
 8004396:	334d      	adds	r3, #77	@ 0x4d
 8004398:	2209      	movs	r2, #9
 800439a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	78fa      	ldrb	r2, [r7, #3]
 80043a2:	4611      	mov	r1, r2
 80043a4:	4618      	mov	r0, r3
 80043a6:	f001 fd95 	bl	8005ed4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80043aa:	78fb      	ldrb	r3, [r7, #3]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043b6:	461a      	mov	r2, r3
 80043b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043bc:	6093      	str	r3, [r2, #8]
 80043be:	e1ee      	b.n	800479e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	78fa      	ldrb	r2, [r7, #3]
 80043c6:	4611      	mov	r1, r2
 80043c8:	4618      	mov	r0, r3
 80043ca:	f001 fd06 	bl	8005dda <USB_ReadChInterrupts>
 80043ce:	4603      	mov	r3, r0
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	f040 81df 	bne.w	8004798 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80043da:	78fb      	ldrb	r3, [r7, #3]
 80043dc:	015a      	lsls	r2, r3, #5
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043e6:	461a      	mov	r2, r3
 80043e8:	2302      	movs	r3, #2
 80043ea:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80043ec:	78fa      	ldrb	r2, [r7, #3]
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	4613      	mov	r3, r2
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	1a9b      	subs	r3, r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	334d      	adds	r3, #77	@ 0x4d
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	f040 8093 	bne.w	800452a <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004404:	78fa      	ldrb	r2, [r7, #3]
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	4613      	mov	r3, r2
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	1a9b      	subs	r3, r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	440b      	add	r3, r1
 8004412:	334d      	adds	r3, #77	@ 0x4d
 8004414:	2202      	movs	r2, #2
 8004416:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004418:	78fa      	ldrb	r2, [r7, #3]
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	334c      	adds	r3, #76	@ 0x4c
 8004428:	2201      	movs	r2, #1
 800442a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800442c:	78fa      	ldrb	r2, [r7, #3]
 800442e:	6879      	ldr	r1, [r7, #4]
 8004430:	4613      	mov	r3, r2
 8004432:	011b      	lsls	r3, r3, #4
 8004434:	1a9b      	subs	r3, r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	3326      	adds	r3, #38	@ 0x26
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b02      	cmp	r3, #2
 8004440:	d00b      	beq.n	800445a <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004442:	78fa      	ldrb	r2, [r7, #3]
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	4613      	mov	r3, r2
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	1a9b      	subs	r3, r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	440b      	add	r3, r1
 8004450:	3326      	adds	r3, #38	@ 0x26
 8004452:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004454:	2b03      	cmp	r3, #3
 8004456:	f040 8190 	bne.w	800477a <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	799b      	ldrb	r3, [r3, #6]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d115      	bne.n	800448e <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004462:	78fa      	ldrb	r2, [r7, #3]
 8004464:	6879      	ldr	r1, [r7, #4]
 8004466:	4613      	mov	r3, r2
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	1a9b      	subs	r3, r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	440b      	add	r3, r1
 8004470:	333d      	adds	r3, #61	@ 0x3d
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	78fa      	ldrb	r2, [r7, #3]
 8004476:	f083 0301 	eor.w	r3, r3, #1
 800447a:	b2d8      	uxtb	r0, r3
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	4613      	mov	r3, r2
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	1a9b      	subs	r3, r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	440b      	add	r3, r1
 8004488:	333d      	adds	r3, #61	@ 0x3d
 800448a:	4602      	mov	r2, r0
 800448c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	799b      	ldrb	r3, [r3, #6]
 8004492:	2b01      	cmp	r3, #1
 8004494:	f040 8171 	bne.w	800477a <HCD_HC_OUT_IRQHandler+0x954>
 8004498:	78fa      	ldrb	r2, [r7, #3]
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	4613      	mov	r3, r2
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	1a9b      	subs	r3, r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	440b      	add	r3, r1
 80044a6:	3334      	adds	r3, #52	@ 0x34
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 8165 	beq.w	800477a <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80044b0:	78fa      	ldrb	r2, [r7, #3]
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	4613      	mov	r3, r2
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	1a9b      	subs	r3, r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	3334      	adds	r3, #52	@ 0x34
 80044c0:	6819      	ldr	r1, [r3, #0]
 80044c2:	78fa      	ldrb	r2, [r7, #3]
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	4613      	mov	r3, r2
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	1a9b      	subs	r3, r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4403      	add	r3, r0
 80044d0:	3328      	adds	r3, #40	@ 0x28
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	440b      	add	r3, r1
 80044d6:	1e59      	subs	r1, r3, #1
 80044d8:	78fa      	ldrb	r2, [r7, #3]
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	4613      	mov	r3, r2
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	1a9b      	subs	r3, r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4403      	add	r3, r0
 80044e6:	3328      	adds	r3, #40	@ 0x28
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80044ee:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 813f 	beq.w	800477a <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80044fc:	78fa      	ldrb	r2, [r7, #3]
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	4613      	mov	r3, r2
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	1a9b      	subs	r3, r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	440b      	add	r3, r1
 800450a:	333d      	adds	r3, #61	@ 0x3d
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	78fa      	ldrb	r2, [r7, #3]
 8004510:	f083 0301 	eor.w	r3, r3, #1
 8004514:	b2d8      	uxtb	r0, r3
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	4613      	mov	r3, r2
 800451a:	011b      	lsls	r3, r3, #4
 800451c:	1a9b      	subs	r3, r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	440b      	add	r3, r1
 8004522:	333d      	adds	r3, #61	@ 0x3d
 8004524:	4602      	mov	r2, r0
 8004526:	701a      	strb	r2, [r3, #0]
 8004528:	e127      	b.n	800477a <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800452a:	78fa      	ldrb	r2, [r7, #3]
 800452c:	6879      	ldr	r1, [r7, #4]
 800452e:	4613      	mov	r3, r2
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	1a9b      	subs	r3, r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	440b      	add	r3, r1
 8004538:	334d      	adds	r3, #77	@ 0x4d
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b03      	cmp	r3, #3
 800453e:	d120      	bne.n	8004582 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004540:	78fa      	ldrb	r2, [r7, #3]
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	4613      	mov	r3, r2
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	1a9b      	subs	r3, r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	334d      	adds	r3, #77	@ 0x4d
 8004550:	2202      	movs	r2, #2
 8004552:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004554:	78fa      	ldrb	r2, [r7, #3]
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	4613      	mov	r3, r2
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	1a9b      	subs	r3, r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	440b      	add	r3, r1
 8004562:	331b      	adds	r3, #27
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	2b01      	cmp	r3, #1
 8004568:	f040 8107 	bne.w	800477a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800456c:	78fa      	ldrb	r2, [r7, #3]
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	4613      	mov	r3, r2
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	1a9b      	subs	r3, r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	334c      	adds	r3, #76	@ 0x4c
 800457c:	2202      	movs	r2, #2
 800457e:	701a      	strb	r2, [r3, #0]
 8004580:	e0fb      	b.n	800477a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004582:	78fa      	ldrb	r2, [r7, #3]
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	4613      	mov	r3, r2
 8004588:	011b      	lsls	r3, r3, #4
 800458a:	1a9b      	subs	r3, r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	440b      	add	r3, r1
 8004590:	334d      	adds	r3, #77	@ 0x4d
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	2b04      	cmp	r3, #4
 8004596:	d13a      	bne.n	800460e <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004598:	78fa      	ldrb	r2, [r7, #3]
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	4613      	mov	r3, r2
 800459e:	011b      	lsls	r3, r3, #4
 80045a0:	1a9b      	subs	r3, r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	440b      	add	r3, r1
 80045a6:	334d      	adds	r3, #77	@ 0x4d
 80045a8:	2202      	movs	r2, #2
 80045aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80045ac:	78fa      	ldrb	r2, [r7, #3]
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	4613      	mov	r3, r2
 80045b2:	011b      	lsls	r3, r3, #4
 80045b4:	1a9b      	subs	r3, r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	440b      	add	r3, r1
 80045ba:	334c      	adds	r3, #76	@ 0x4c
 80045bc:	2202      	movs	r2, #2
 80045be:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80045c0:	78fa      	ldrb	r2, [r7, #3]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	4613      	mov	r3, r2
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	1a9b      	subs	r3, r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	331b      	adds	r3, #27
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	f040 80d1 	bne.w	800477a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80045d8:	78fa      	ldrb	r2, [r7, #3]
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	4613      	mov	r3, r2
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	1a9b      	subs	r3, r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	440b      	add	r3, r1
 80045e6:	331b      	adds	r3, #27
 80045e8:	2200      	movs	r2, #0
 80045ea:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80045ec:	78fb      	ldrb	r3, [r7, #3]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	78fa      	ldrb	r2, [r7, #3]
 80045fc:	0151      	lsls	r1, r2, #5
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	440a      	add	r2, r1
 8004602:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004606:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800460a:	6053      	str	r3, [r2, #4]
 800460c:	e0b5      	b.n	800477a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800460e:	78fa      	ldrb	r2, [r7, #3]
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	1a9b      	subs	r3, r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	334d      	adds	r3, #77	@ 0x4d
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b05      	cmp	r3, #5
 8004622:	d114      	bne.n	800464e <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004624:	78fa      	ldrb	r2, [r7, #3]
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	4613      	mov	r3, r2
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	1a9b      	subs	r3, r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	334d      	adds	r3, #77	@ 0x4d
 8004634:	2202      	movs	r2, #2
 8004636:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004638:	78fa      	ldrb	r2, [r7, #3]
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	4613      	mov	r3, r2
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	1a9b      	subs	r3, r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	334c      	adds	r3, #76	@ 0x4c
 8004648:	2202      	movs	r2, #2
 800464a:	701a      	strb	r2, [r3, #0]
 800464c:	e095      	b.n	800477a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800464e:	78fa      	ldrb	r2, [r7, #3]
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	4613      	mov	r3, r2
 8004654:	011b      	lsls	r3, r3, #4
 8004656:	1a9b      	subs	r3, r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	440b      	add	r3, r1
 800465c:	334d      	adds	r3, #77	@ 0x4d
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	2b06      	cmp	r3, #6
 8004662:	d114      	bne.n	800468e <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004664:	78fa      	ldrb	r2, [r7, #3]
 8004666:	6879      	ldr	r1, [r7, #4]
 8004668:	4613      	mov	r3, r2
 800466a:	011b      	lsls	r3, r3, #4
 800466c:	1a9b      	subs	r3, r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	440b      	add	r3, r1
 8004672:	334d      	adds	r3, #77	@ 0x4d
 8004674:	2202      	movs	r2, #2
 8004676:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004678:	78fa      	ldrb	r2, [r7, #3]
 800467a:	6879      	ldr	r1, [r7, #4]
 800467c:	4613      	mov	r3, r2
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	1a9b      	subs	r3, r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	334c      	adds	r3, #76	@ 0x4c
 8004688:	2205      	movs	r2, #5
 800468a:	701a      	strb	r2, [r3, #0]
 800468c:	e075      	b.n	800477a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800468e:	78fa      	ldrb	r2, [r7, #3]
 8004690:	6879      	ldr	r1, [r7, #4]
 8004692:	4613      	mov	r3, r2
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	1a9b      	subs	r3, r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	440b      	add	r3, r1
 800469c:	334d      	adds	r3, #77	@ 0x4d
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	2b07      	cmp	r3, #7
 80046a2:	d00a      	beq.n	80046ba <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80046a4:	78fa      	ldrb	r2, [r7, #3]
 80046a6:	6879      	ldr	r1, [r7, #4]
 80046a8:	4613      	mov	r3, r2
 80046aa:	011b      	lsls	r3, r3, #4
 80046ac:	1a9b      	subs	r3, r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	334d      	adds	r3, #77	@ 0x4d
 80046b4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80046b6:	2b09      	cmp	r3, #9
 80046b8:	d170      	bne.n	800479c <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80046ba:	78fa      	ldrb	r2, [r7, #3]
 80046bc:	6879      	ldr	r1, [r7, #4]
 80046be:	4613      	mov	r3, r2
 80046c0:	011b      	lsls	r3, r3, #4
 80046c2:	1a9b      	subs	r3, r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	440b      	add	r3, r1
 80046c8:	334d      	adds	r3, #77	@ 0x4d
 80046ca:	2202      	movs	r2, #2
 80046cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80046ce:	78fa      	ldrb	r2, [r7, #3]
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	4613      	mov	r3, r2
 80046d4:	011b      	lsls	r3, r3, #4
 80046d6:	1a9b      	subs	r3, r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	440b      	add	r3, r1
 80046dc:	3344      	adds	r3, #68	@ 0x44
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	1c59      	adds	r1, r3, #1
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	4613      	mov	r3, r2
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	1a9b      	subs	r3, r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	4403      	add	r3, r0
 80046ee:	3344      	adds	r3, #68	@ 0x44
 80046f0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046f2:	78fa      	ldrb	r2, [r7, #3]
 80046f4:	6879      	ldr	r1, [r7, #4]
 80046f6:	4613      	mov	r3, r2
 80046f8:	011b      	lsls	r3, r3, #4
 80046fa:	1a9b      	subs	r3, r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	440b      	add	r3, r1
 8004700:	3344      	adds	r3, #68	@ 0x44
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b02      	cmp	r3, #2
 8004706:	d914      	bls.n	8004732 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004708:	78fa      	ldrb	r2, [r7, #3]
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	4613      	mov	r3, r2
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	1a9b      	subs	r3, r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	3344      	adds	r3, #68	@ 0x44
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800471c:	78fa      	ldrb	r2, [r7, #3]
 800471e:	6879      	ldr	r1, [r7, #4]
 8004720:	4613      	mov	r3, r2
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	1a9b      	subs	r3, r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	440b      	add	r3, r1
 800472a:	334c      	adds	r3, #76	@ 0x4c
 800472c:	2204      	movs	r2, #4
 800472e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004730:	e022      	b.n	8004778 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004732:	78fa      	ldrb	r2, [r7, #3]
 8004734:	6879      	ldr	r1, [r7, #4]
 8004736:	4613      	mov	r3, r2
 8004738:	011b      	lsls	r3, r3, #4
 800473a:	1a9b      	subs	r3, r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	440b      	add	r3, r1
 8004740:	334c      	adds	r3, #76	@ 0x4c
 8004742:	2202      	movs	r2, #2
 8004744:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004746:	78fb      	ldrb	r3, [r7, #3]
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	4413      	add	r3, r2
 800474e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800475c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004764:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004766:	78fb      	ldrb	r3, [r7, #3]
 8004768:	015a      	lsls	r2, r3, #5
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	4413      	add	r3, r2
 800476e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004772:	461a      	mov	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004778:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800477a:	78fa      	ldrb	r2, [r7, #3]
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	4613      	mov	r3, r2
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	1a9b      	subs	r3, r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	440b      	add	r3, r1
 8004788:	334c      	adds	r3, #76	@ 0x4c
 800478a:	781a      	ldrb	r2, [r3, #0]
 800478c:	78fb      	ldrb	r3, [r7, #3]
 800478e:	4619      	mov	r1, r3
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f001 fe1a 	bl	80063ca <HAL_HCD_HC_NotifyURBChange_Callback>
 8004796:	e002      	b.n	800479e <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004798:	bf00      	nop
 800479a:	e000      	b.n	800479e <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800479c:	bf00      	nop
  }
}
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b08a      	sub	sp, #40	@ 0x28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	f003 030f 	and.w	r3, r3, #15
 80047c4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	0c5b      	lsrs	r3, r3, #17
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	091b      	lsrs	r3, r3, #4
 80047d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047d8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d004      	beq.n	80047ea <HCD_RXQLVL_IRQHandler+0x46>
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	2b05      	cmp	r3, #5
 80047e4:	f000 80b6 	beq.w	8004954 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80047e8:	e0b7      	b.n	800495a <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 80b3 	beq.w	8004958 <HCD_RXQLVL_IRQHandler+0x1b4>
 80047f2:	6879      	ldr	r1, [r7, #4]
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	4613      	mov	r3, r2
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	1a9b      	subs	r3, r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	440b      	add	r3, r1
 8004800:	332c      	adds	r3, #44	@ 0x2c
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 80a7 	beq.w	8004958 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	4613      	mov	r3, r2
 8004810:	011b      	lsls	r3, r3, #4
 8004812:	1a9b      	subs	r3, r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	440b      	add	r3, r1
 8004818:	3338      	adds	r3, #56	@ 0x38
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	18d1      	adds	r1, r2, r3
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	4613      	mov	r3, r2
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	1a9b      	subs	r3, r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4403      	add	r3, r0
 800482e:	3334      	adds	r3, #52	@ 0x34
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4299      	cmp	r1, r3
 8004834:	f200 8083 	bhi.w	800493e <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6818      	ldr	r0, [r3, #0]
 800483c:	6879      	ldr	r1, [r7, #4]
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	4613      	mov	r3, r2
 8004842:	011b      	lsls	r3, r3, #4
 8004844:	1a9b      	subs	r3, r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	440b      	add	r3, r1
 800484a:	332c      	adds	r3, #44	@ 0x2c
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	b292      	uxth	r2, r2
 8004852:	4619      	mov	r1, r3
 8004854:	f001 fa56 	bl	8005d04 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004858:	6879      	ldr	r1, [r7, #4]
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	4613      	mov	r3, r2
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	1a9b      	subs	r3, r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	440b      	add	r3, r1
 8004866:	332c      	adds	r3, #44	@ 0x2c
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	18d1      	adds	r1, r2, r3
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	4613      	mov	r3, r2
 8004874:	011b      	lsls	r3, r3, #4
 8004876:	1a9b      	subs	r3, r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4403      	add	r3, r0
 800487c:	332c      	adds	r3, #44	@ 0x2c
 800487e:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004880:	6879      	ldr	r1, [r7, #4]
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	4613      	mov	r3, r2
 8004886:	011b      	lsls	r3, r3, #4
 8004888:	1a9b      	subs	r3, r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	440b      	add	r3, r1
 800488e:	3338      	adds	r3, #56	@ 0x38
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	18d1      	adds	r1, r2, r3
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4613      	mov	r3, r2
 800489c:	011b      	lsls	r3, r3, #4
 800489e:	1a9b      	subs	r3, r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4403      	add	r3, r0
 80048a4:	3338      	adds	r3, #56	@ 0x38
 80048a6:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	0cdb      	lsrs	r3, r3, #19
 80048b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048bc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80048be:	6879      	ldr	r1, [r7, #4]
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	4613      	mov	r3, r2
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	1a9b      	subs	r3, r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	440b      	add	r3, r1
 80048cc:	3328      	adds	r3, #40	@ 0x28
 80048ce:	881b      	ldrh	r3, [r3, #0]
 80048d0:	461a      	mov	r2, r3
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d13f      	bne.n	8004958 <HCD_RXQLVL_IRQHandler+0x1b4>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d03c      	beq.n	8004958 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80048f4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80048fc:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	015a      	lsls	r2, r3, #5
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	4413      	add	r3, r2
 8004906:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800490a:	461a      	mov	r2, r3
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004910:	6879      	ldr	r1, [r7, #4]
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	4613      	mov	r3, r2
 8004916:	011b      	lsls	r3, r3, #4
 8004918:	1a9b      	subs	r3, r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	440b      	add	r3, r1
 800491e:	333c      	adds	r3, #60	@ 0x3c
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	f083 0301 	eor.w	r3, r3, #1
 8004926:	b2d8      	uxtb	r0, r3
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	4613      	mov	r3, r2
 800492e:	011b      	lsls	r3, r3, #4
 8004930:	1a9b      	subs	r3, r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	440b      	add	r3, r1
 8004936:	333c      	adds	r3, #60	@ 0x3c
 8004938:	4602      	mov	r2, r0
 800493a:	701a      	strb	r2, [r3, #0]
      break;
 800493c:	e00c      	b.n	8004958 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800493e:	6879      	ldr	r1, [r7, #4]
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	4613      	mov	r3, r2
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	1a9b      	subs	r3, r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	440b      	add	r3, r1
 800494c:	334c      	adds	r3, #76	@ 0x4c
 800494e:	2204      	movs	r2, #4
 8004950:	701a      	strb	r2, [r3, #0]
      break;
 8004952:	e001      	b.n	8004958 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004954:	bf00      	nop
 8004956:	e000      	b.n	800495a <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004958:	bf00      	nop
  }
}
 800495a:	bf00      	nop
 800495c:	3728      	adds	r7, #40	@ 0x28
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b086      	sub	sp, #24
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800498e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b02      	cmp	r3, #2
 8004998:	d10b      	bne.n	80049b2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d102      	bne.n	80049aa <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f001 fcf4 	bl	8006392 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	f043 0302 	orr.w	r3, r3, #2
 80049b0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f003 0308 	and.w	r3, r3, #8
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d132      	bne.n	8004a22 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	f043 0308 	orr.w	r3, r3, #8
 80049c2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f003 0304 	and.w	r3, r3, #4
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d126      	bne.n	8004a1c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	7a5b      	ldrb	r3, [r3, #9]
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d113      	bne.n	80049fe <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80049dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80049e0:	d106      	bne.n	80049f0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2102      	movs	r1, #2
 80049e8:	4618      	mov	r0, r3
 80049ea:	f001 fa25 	bl	8005e38 <USB_InitFSLSPClkSel>
 80049ee:	e011      	b.n	8004a14 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2101      	movs	r1, #1
 80049f6:	4618      	mov	r0, r3
 80049f8:	f001 fa1e 	bl	8005e38 <USB_InitFSLSPClkSel>
 80049fc:	e00a      	b.n	8004a14 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	79db      	ldrb	r3, [r3, #7]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d106      	bne.n	8004a14 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004a12:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f001 fce6 	bl	80063e6 <HAL_HCD_PortEnabled_Callback>
 8004a1a:	e002      	b.n	8004a22 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f001 fcf0 	bl	8006402 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f003 0320 	and.w	r3, r3, #32
 8004a28:	2b20      	cmp	r3, #32
 8004a2a:	d103      	bne.n	8004a34 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f043 0320 	orr.w	r3, r3, #32
 8004a32:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	6013      	str	r3, [r2, #0]
}
 8004a40:	bf00      	nop
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e267      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d075      	beq.n	8004b52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a66:	4b88      	ldr	r3, [pc, #544]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f003 030c 	and.w	r3, r3, #12
 8004a6e:	2b04      	cmp	r3, #4
 8004a70:	d00c      	beq.n	8004a8c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a72:	4b85      	ldr	r3, [pc, #532]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a7a:	2b08      	cmp	r3, #8
 8004a7c:	d112      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a7e:	4b82      	ldr	r3, [pc, #520]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a8a:	d10b      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a8c:	4b7e      	ldr	r3, [pc, #504]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d05b      	beq.n	8004b50 <HAL_RCC_OscConfig+0x108>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d157      	bne.n	8004b50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e242      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aac:	d106      	bne.n	8004abc <HAL_RCC_OscConfig+0x74>
 8004aae:	4b76      	ldr	r3, [pc, #472]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a75      	ldr	r2, [pc, #468]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ab8:	6013      	str	r3, [r2, #0]
 8004aba:	e01d      	b.n	8004af8 <HAL_RCC_OscConfig+0xb0>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ac4:	d10c      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x98>
 8004ac6:	4b70      	ldr	r3, [pc, #448]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a6f      	ldr	r2, [pc, #444]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004acc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	4b6d      	ldr	r3, [pc, #436]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a6c      	ldr	r2, [pc, #432]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	e00b      	b.n	8004af8 <HAL_RCC_OscConfig+0xb0>
 8004ae0:	4b69      	ldr	r3, [pc, #420]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a68      	ldr	r2, [pc, #416]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004ae6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aea:	6013      	str	r3, [r2, #0]
 8004aec:	4b66      	ldr	r3, [pc, #408]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a65      	ldr	r2, [pc, #404]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004af2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d013      	beq.n	8004b28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b00:	f7fc fdba 	bl	8001678 <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b08:	f7fc fdb6 	bl	8001678 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b64      	cmp	r3, #100	@ 0x64
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e207      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b1a:	4b5b      	ldr	r3, [pc, #364]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d0f0      	beq.n	8004b08 <HAL_RCC_OscConfig+0xc0>
 8004b26:	e014      	b.n	8004b52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b28:	f7fc fda6 	bl	8001678 <HAL_GetTick>
 8004b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b30:	f7fc fda2 	bl	8001678 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b64      	cmp	r3, #100	@ 0x64
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e1f3      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b42:	4b51      	ldr	r3, [pc, #324]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1f0      	bne.n	8004b30 <HAL_RCC_OscConfig+0xe8>
 8004b4e:	e000      	b.n	8004b52 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d063      	beq.n	8004c26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b5e:	4b4a      	ldr	r3, [pc, #296]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 030c 	and.w	r3, r3, #12
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00b      	beq.n	8004b82 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b6a:	4b47      	ldr	r3, [pc, #284]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b72:	2b08      	cmp	r3, #8
 8004b74:	d11c      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b76:	4b44      	ldr	r3, [pc, #272]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d116      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b82:	4b41      	ldr	r3, [pc, #260]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d005      	beq.n	8004b9a <HAL_RCC_OscConfig+0x152>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d001      	beq.n	8004b9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e1c7      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b9a:	4b3b      	ldr	r3, [pc, #236]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	4937      	ldr	r1, [pc, #220]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bae:	e03a      	b.n	8004c26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d020      	beq.n	8004bfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bb8:	4b34      	ldr	r3, [pc, #208]	@ (8004c8c <HAL_RCC_OscConfig+0x244>)
 8004bba:	2201      	movs	r2, #1
 8004bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bbe:	f7fc fd5b 	bl	8001678 <HAL_GetTick>
 8004bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc4:	e008      	b.n	8004bd8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bc6:	f7fc fd57 	bl	8001678 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d901      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e1a8      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd8:	4b2b      	ldr	r3, [pc, #172]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d0f0      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be4:	4b28      	ldr	r3, [pc, #160]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	4925      	ldr	r1, [pc, #148]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	600b      	str	r3, [r1, #0]
 8004bf8:	e015      	b.n	8004c26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bfa:	4b24      	ldr	r3, [pc, #144]	@ (8004c8c <HAL_RCC_OscConfig+0x244>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c00:	f7fc fd3a 	bl	8001678 <HAL_GetTick>
 8004c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c08:	f7fc fd36 	bl	8001678 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e187      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1f0      	bne.n	8004c08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d036      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d016      	beq.n	8004c68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c3a:	4b15      	ldr	r3, [pc, #84]	@ (8004c90 <HAL_RCC_OscConfig+0x248>)
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c40:	f7fc fd1a 	bl	8001678 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c48:	f7fc fd16 	bl	8001678 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e167      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004c88 <HAL_RCC_OscConfig+0x240>)
 8004c5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0f0      	beq.n	8004c48 <HAL_RCC_OscConfig+0x200>
 8004c66:	e01b      	b.n	8004ca0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c68:	4b09      	ldr	r3, [pc, #36]	@ (8004c90 <HAL_RCC_OscConfig+0x248>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c6e:	f7fc fd03 	bl	8001678 <HAL_GetTick>
 8004c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c74:	e00e      	b.n	8004c94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c76:	f7fc fcff 	bl	8001678 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d907      	bls.n	8004c94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e150      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
 8004c88:	40023800 	.word	0x40023800
 8004c8c:	42470000 	.word	0x42470000
 8004c90:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c94:	4b88      	ldr	r3, [pc, #544]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004c96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1ea      	bne.n	8004c76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 8097 	beq.w	8004ddc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cb2:	4b81      	ldr	r3, [pc, #516]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10f      	bne.n	8004cde <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60bb      	str	r3, [r7, #8]
 8004cc2:	4b7d      	ldr	r3, [pc, #500]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc6:	4a7c      	ldr	r2, [pc, #496]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004cc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cce:	4b7a      	ldr	r3, [pc, #488]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cd6:	60bb      	str	r3, [r7, #8]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cde:	4b77      	ldr	r3, [pc, #476]	@ (8004ebc <HAL_RCC_OscConfig+0x474>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d118      	bne.n	8004d1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cea:	4b74      	ldr	r3, [pc, #464]	@ (8004ebc <HAL_RCC_OscConfig+0x474>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a73      	ldr	r2, [pc, #460]	@ (8004ebc <HAL_RCC_OscConfig+0x474>)
 8004cf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cf6:	f7fc fcbf 	bl	8001678 <HAL_GetTick>
 8004cfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cfc:	e008      	b.n	8004d10 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cfe:	f7fc fcbb 	bl	8001678 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e10c      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d10:	4b6a      	ldr	r3, [pc, #424]	@ (8004ebc <HAL_RCC_OscConfig+0x474>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0f0      	beq.n	8004cfe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d106      	bne.n	8004d32 <HAL_RCC_OscConfig+0x2ea>
 8004d24:	4b64      	ldr	r3, [pc, #400]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d28:	4a63      	ldr	r2, [pc, #396]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004d2a:	f043 0301 	orr.w	r3, r3, #1
 8004d2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d30:	e01c      	b.n	8004d6c <HAL_RCC_OscConfig+0x324>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	2b05      	cmp	r3, #5
 8004d38:	d10c      	bne.n	8004d54 <HAL_RCC_OscConfig+0x30c>
 8004d3a:	4b5f      	ldr	r3, [pc, #380]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d3e:	4a5e      	ldr	r2, [pc, #376]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004d40:	f043 0304 	orr.w	r3, r3, #4
 8004d44:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d46:	4b5c      	ldr	r3, [pc, #368]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4a:	4a5b      	ldr	r2, [pc, #364]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004d4c:	f043 0301 	orr.w	r3, r3, #1
 8004d50:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d52:	e00b      	b.n	8004d6c <HAL_RCC_OscConfig+0x324>
 8004d54:	4b58      	ldr	r3, [pc, #352]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d58:	4a57      	ldr	r2, [pc, #348]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004d5a:	f023 0301 	bic.w	r3, r3, #1
 8004d5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d60:	4b55      	ldr	r3, [pc, #340]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d64:	4a54      	ldr	r2, [pc, #336]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004d66:	f023 0304 	bic.w	r3, r3, #4
 8004d6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d015      	beq.n	8004da0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d74:	f7fc fc80 	bl	8001678 <HAL_GetTick>
 8004d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7a:	e00a      	b.n	8004d92 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d7c:	f7fc fc7c 	bl	8001678 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e0cb      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d92:	4b49      	ldr	r3, [pc, #292]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0ee      	beq.n	8004d7c <HAL_RCC_OscConfig+0x334>
 8004d9e:	e014      	b.n	8004dca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004da0:	f7fc fc6a 	bl	8001678 <HAL_GetTick>
 8004da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004da6:	e00a      	b.n	8004dbe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da8:	f7fc fc66 	bl	8001678 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e0b5      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dbe:	4b3e      	ldr	r3, [pc, #248]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1ee      	bne.n	8004da8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dca:	7dfb      	ldrb	r3, [r7, #23]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d105      	bne.n	8004ddc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dd0:	4b39      	ldr	r3, [pc, #228]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd4:	4a38      	ldr	r2, [pc, #224]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004dd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dda:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 80a1 	beq.w	8004f28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004de6:	4b34      	ldr	r3, [pc, #208]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 030c 	and.w	r3, r3, #12
 8004dee:	2b08      	cmp	r3, #8
 8004df0:	d05c      	beq.n	8004eac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d141      	bne.n	8004e7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dfa:	4b31      	ldr	r3, [pc, #196]	@ (8004ec0 <HAL_RCC_OscConfig+0x478>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e00:	f7fc fc3a 	bl	8001678 <HAL_GetTick>
 8004e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e06:	e008      	b.n	8004e1a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e08:	f7fc fc36 	bl	8001678 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e087      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e1a:	4b27      	ldr	r3, [pc, #156]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1f0      	bne.n	8004e08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	69da      	ldr	r2, [r3, #28]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e34:	019b      	lsls	r3, r3, #6
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e3c:	085b      	lsrs	r3, r3, #1
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	041b      	lsls	r3, r3, #16
 8004e42:	431a      	orrs	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e48:	061b      	lsls	r3, r3, #24
 8004e4a:	491b      	ldr	r1, [pc, #108]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e50:	4b1b      	ldr	r3, [pc, #108]	@ (8004ec0 <HAL_RCC_OscConfig+0x478>)
 8004e52:	2201      	movs	r2, #1
 8004e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e56:	f7fc fc0f 	bl	8001678 <HAL_GetTick>
 8004e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e5c:	e008      	b.n	8004e70 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e5e:	f7fc fc0b 	bl	8001678 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e05c      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e70:	4b11      	ldr	r3, [pc, #68]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0f0      	beq.n	8004e5e <HAL_RCC_OscConfig+0x416>
 8004e7c:	e054      	b.n	8004f28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e7e:	4b10      	ldr	r3, [pc, #64]	@ (8004ec0 <HAL_RCC_OscConfig+0x478>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e84:	f7fc fbf8 	bl	8001678 <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e8c:	f7fc fbf4 	bl	8001678 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e045      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9e:	4b06      	ldr	r3, [pc, #24]	@ (8004eb8 <HAL_RCC_OscConfig+0x470>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1f0      	bne.n	8004e8c <HAL_RCC_OscConfig+0x444>
 8004eaa:	e03d      	b.n	8004f28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d107      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e038      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	40007000 	.word	0x40007000
 8004ec0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f34 <HAL_RCC_OscConfig+0x4ec>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d028      	beq.n	8004f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d121      	bne.n	8004f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d11a      	bne.n	8004f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004efa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d111      	bne.n	8004f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0a:	085b      	lsrs	r3, r3, #1
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d107      	bne.n	8004f24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d001      	beq.n	8004f28 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e000      	b.n	8004f2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3718      	adds	r7, #24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	40023800 	.word	0x40023800

08004f38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e0cc      	b.n	80050e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f4c:	4b68      	ldr	r3, [pc, #416]	@ (80050f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0307 	and.w	r3, r3, #7
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d90c      	bls.n	8004f74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f5a:	4b65      	ldr	r3, [pc, #404]	@ (80050f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	b2d2      	uxtb	r2, r2
 8004f60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f62:	4b63      	ldr	r3, [pc, #396]	@ (80050f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0307 	and.w	r3, r3, #7
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d001      	beq.n	8004f74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e0b8      	b.n	80050e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d020      	beq.n	8004fc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0304 	and.w	r3, r3, #4
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d005      	beq.n	8004f98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f8c:	4b59      	ldr	r3, [pc, #356]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	4a58      	ldr	r2, [pc, #352]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0308 	and.w	r3, r3, #8
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d005      	beq.n	8004fb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fa4:	4b53      	ldr	r3, [pc, #332]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	4a52      	ldr	r2, [pc, #328]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004faa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004fae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fb0:	4b50      	ldr	r3, [pc, #320]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	494d      	ldr	r1, [pc, #308]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d044      	beq.n	8005058 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d107      	bne.n	8004fe6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fd6:	4b47      	ldr	r3, [pc, #284]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d119      	bne.n	8005016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e07f      	b.n	80050e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d003      	beq.n	8004ff6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ff2:	2b03      	cmp	r3, #3
 8004ff4:	d107      	bne.n	8005006 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ff6:	4b3f      	ldr	r3, [pc, #252]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d109      	bne.n	8005016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e06f      	b.n	80050e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005006:	4b3b      	ldr	r3, [pc, #236]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e067      	b.n	80050e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005016:	4b37      	ldr	r3, [pc, #220]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f023 0203 	bic.w	r2, r3, #3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	4934      	ldr	r1, [pc, #208]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005024:	4313      	orrs	r3, r2
 8005026:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005028:	f7fc fb26 	bl	8001678 <HAL_GetTick>
 800502c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800502e:	e00a      	b.n	8005046 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005030:	f7fc fb22 	bl	8001678 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800503e:	4293      	cmp	r3, r2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e04f      	b.n	80050e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005046:	4b2b      	ldr	r3, [pc, #172]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 020c 	and.w	r2, r3, #12
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	429a      	cmp	r2, r3
 8005056:	d1eb      	bne.n	8005030 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005058:	4b25      	ldr	r3, [pc, #148]	@ (80050f0 <HAL_RCC_ClockConfig+0x1b8>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d20c      	bcs.n	8005080 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005066:	4b22      	ldr	r3, [pc, #136]	@ (80050f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	b2d2      	uxtb	r2, r2
 800506c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800506e:	4b20      	ldr	r3, [pc, #128]	@ (80050f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0307 	and.w	r3, r3, #7
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	429a      	cmp	r2, r3
 800507a:	d001      	beq.n	8005080 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e032      	b.n	80050e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0304 	and.w	r3, r3, #4
 8005088:	2b00      	cmp	r3, #0
 800508a:	d008      	beq.n	800509e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800508c:	4b19      	ldr	r3, [pc, #100]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	4916      	ldr	r1, [pc, #88]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 800509a:	4313      	orrs	r3, r2
 800509c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0308 	and.w	r3, r3, #8
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d009      	beq.n	80050be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050aa:	4b12      	ldr	r3, [pc, #72]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	490e      	ldr	r1, [pc, #56]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050be:	f000 f821 	bl	8005104 <HAL_RCC_GetSysClockFreq>
 80050c2:	4602      	mov	r2, r0
 80050c4:	4b0b      	ldr	r3, [pc, #44]	@ (80050f4 <HAL_RCC_ClockConfig+0x1bc>)
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	091b      	lsrs	r3, r3, #4
 80050ca:	f003 030f 	and.w	r3, r3, #15
 80050ce:	490a      	ldr	r1, [pc, #40]	@ (80050f8 <HAL_RCC_ClockConfig+0x1c0>)
 80050d0:	5ccb      	ldrb	r3, [r1, r3]
 80050d2:	fa22 f303 	lsr.w	r3, r2, r3
 80050d6:	4a09      	ldr	r2, [pc, #36]	@ (80050fc <HAL_RCC_ClockConfig+0x1c4>)
 80050d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80050da:	4b09      	ldr	r3, [pc, #36]	@ (8005100 <HAL_RCC_ClockConfig+0x1c8>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fc fa86 	bl	80015f0 <HAL_InitTick>

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	40023c00 	.word	0x40023c00
 80050f4:	40023800 	.word	0x40023800
 80050f8:	08006578 	.word	0x08006578
 80050fc:	20000000 	.word	0x20000000
 8005100:	20000004 	.word	0x20000004

08005104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005108:	b094      	sub	sp, #80	@ 0x50
 800510a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800510c:	2300      	movs	r3, #0
 800510e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800511c:	4b79      	ldr	r3, [pc, #484]	@ (8005304 <HAL_RCC_GetSysClockFreq+0x200>)
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f003 030c 	and.w	r3, r3, #12
 8005124:	2b08      	cmp	r3, #8
 8005126:	d00d      	beq.n	8005144 <HAL_RCC_GetSysClockFreq+0x40>
 8005128:	2b08      	cmp	r3, #8
 800512a:	f200 80e1 	bhi.w	80052f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800512e:	2b00      	cmp	r3, #0
 8005130:	d002      	beq.n	8005138 <HAL_RCC_GetSysClockFreq+0x34>
 8005132:	2b04      	cmp	r3, #4
 8005134:	d003      	beq.n	800513e <HAL_RCC_GetSysClockFreq+0x3a>
 8005136:	e0db      	b.n	80052f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005138:	4b73      	ldr	r3, [pc, #460]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x204>)
 800513a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800513c:	e0db      	b.n	80052f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800513e:	4b73      	ldr	r3, [pc, #460]	@ (800530c <HAL_RCC_GetSysClockFreq+0x208>)
 8005140:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005142:	e0d8      	b.n	80052f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005144:	4b6f      	ldr	r3, [pc, #444]	@ (8005304 <HAL_RCC_GetSysClockFreq+0x200>)
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800514c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800514e:	4b6d      	ldr	r3, [pc, #436]	@ (8005304 <HAL_RCC_GetSysClockFreq+0x200>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d063      	beq.n	8005222 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800515a:	4b6a      	ldr	r3, [pc, #424]	@ (8005304 <HAL_RCC_GetSysClockFreq+0x200>)
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	099b      	lsrs	r3, r3, #6
 8005160:	2200      	movs	r2, #0
 8005162:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005164:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800516c:	633b      	str	r3, [r7, #48]	@ 0x30
 800516e:	2300      	movs	r3, #0
 8005170:	637b      	str	r3, [r7, #52]	@ 0x34
 8005172:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005176:	4622      	mov	r2, r4
 8005178:	462b      	mov	r3, r5
 800517a:	f04f 0000 	mov.w	r0, #0
 800517e:	f04f 0100 	mov.w	r1, #0
 8005182:	0159      	lsls	r1, r3, #5
 8005184:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005188:	0150      	lsls	r0, r2, #5
 800518a:	4602      	mov	r2, r0
 800518c:	460b      	mov	r3, r1
 800518e:	4621      	mov	r1, r4
 8005190:	1a51      	subs	r1, r2, r1
 8005192:	6139      	str	r1, [r7, #16]
 8005194:	4629      	mov	r1, r5
 8005196:	eb63 0301 	sbc.w	r3, r3, r1
 800519a:	617b      	str	r3, [r7, #20]
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	f04f 0300 	mov.w	r3, #0
 80051a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051a8:	4659      	mov	r1, fp
 80051aa:	018b      	lsls	r3, r1, #6
 80051ac:	4651      	mov	r1, sl
 80051ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051b2:	4651      	mov	r1, sl
 80051b4:	018a      	lsls	r2, r1, #6
 80051b6:	4651      	mov	r1, sl
 80051b8:	ebb2 0801 	subs.w	r8, r2, r1
 80051bc:	4659      	mov	r1, fp
 80051be:	eb63 0901 	sbc.w	r9, r3, r1
 80051c2:	f04f 0200 	mov.w	r2, #0
 80051c6:	f04f 0300 	mov.w	r3, #0
 80051ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051d6:	4690      	mov	r8, r2
 80051d8:	4699      	mov	r9, r3
 80051da:	4623      	mov	r3, r4
 80051dc:	eb18 0303 	adds.w	r3, r8, r3
 80051e0:	60bb      	str	r3, [r7, #8]
 80051e2:	462b      	mov	r3, r5
 80051e4:	eb49 0303 	adc.w	r3, r9, r3
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	f04f 0200 	mov.w	r2, #0
 80051ee:	f04f 0300 	mov.w	r3, #0
 80051f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80051f6:	4629      	mov	r1, r5
 80051f8:	024b      	lsls	r3, r1, #9
 80051fa:	4621      	mov	r1, r4
 80051fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005200:	4621      	mov	r1, r4
 8005202:	024a      	lsls	r2, r1, #9
 8005204:	4610      	mov	r0, r2
 8005206:	4619      	mov	r1, r3
 8005208:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800520a:	2200      	movs	r2, #0
 800520c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800520e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005210:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005214:	f7fb fade 	bl	80007d4 <__aeabi_uldivmod>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4613      	mov	r3, r2
 800521e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005220:	e058      	b.n	80052d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005222:	4b38      	ldr	r3, [pc, #224]	@ (8005304 <HAL_RCC_GetSysClockFreq+0x200>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	099b      	lsrs	r3, r3, #6
 8005228:	2200      	movs	r2, #0
 800522a:	4618      	mov	r0, r3
 800522c:	4611      	mov	r1, r2
 800522e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005232:	623b      	str	r3, [r7, #32]
 8005234:	2300      	movs	r3, #0
 8005236:	627b      	str	r3, [r7, #36]	@ 0x24
 8005238:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800523c:	4642      	mov	r2, r8
 800523e:	464b      	mov	r3, r9
 8005240:	f04f 0000 	mov.w	r0, #0
 8005244:	f04f 0100 	mov.w	r1, #0
 8005248:	0159      	lsls	r1, r3, #5
 800524a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800524e:	0150      	lsls	r0, r2, #5
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	4641      	mov	r1, r8
 8005256:	ebb2 0a01 	subs.w	sl, r2, r1
 800525a:	4649      	mov	r1, r9
 800525c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005260:	f04f 0200 	mov.w	r2, #0
 8005264:	f04f 0300 	mov.w	r3, #0
 8005268:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800526c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005270:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005274:	ebb2 040a 	subs.w	r4, r2, sl
 8005278:	eb63 050b 	sbc.w	r5, r3, fp
 800527c:	f04f 0200 	mov.w	r2, #0
 8005280:	f04f 0300 	mov.w	r3, #0
 8005284:	00eb      	lsls	r3, r5, #3
 8005286:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800528a:	00e2      	lsls	r2, r4, #3
 800528c:	4614      	mov	r4, r2
 800528e:	461d      	mov	r5, r3
 8005290:	4643      	mov	r3, r8
 8005292:	18e3      	adds	r3, r4, r3
 8005294:	603b      	str	r3, [r7, #0]
 8005296:	464b      	mov	r3, r9
 8005298:	eb45 0303 	adc.w	r3, r5, r3
 800529c:	607b      	str	r3, [r7, #4]
 800529e:	f04f 0200 	mov.w	r2, #0
 80052a2:	f04f 0300 	mov.w	r3, #0
 80052a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052aa:	4629      	mov	r1, r5
 80052ac:	028b      	lsls	r3, r1, #10
 80052ae:	4621      	mov	r1, r4
 80052b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052b4:	4621      	mov	r1, r4
 80052b6:	028a      	lsls	r2, r1, #10
 80052b8:	4610      	mov	r0, r2
 80052ba:	4619      	mov	r1, r3
 80052bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052be:	2200      	movs	r2, #0
 80052c0:	61bb      	str	r3, [r7, #24]
 80052c2:	61fa      	str	r2, [r7, #28]
 80052c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052c8:	f7fb fa84 	bl	80007d4 <__aeabi_uldivmod>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4613      	mov	r3, r2
 80052d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80052d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005304 <HAL_RCC_GetSysClockFreq+0x200>)
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	0c1b      	lsrs	r3, r3, #16
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	3301      	adds	r3, #1
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80052e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052ee:	e002      	b.n	80052f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052f0:	4b05      	ldr	r3, [pc, #20]	@ (8005308 <HAL_RCC_GetSysClockFreq+0x204>)
 80052f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3750      	adds	r7, #80	@ 0x50
 80052fc:	46bd      	mov	sp, r7
 80052fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005302:	bf00      	nop
 8005304:	40023800 	.word	0x40023800
 8005308:	00f42400 	.word	0x00f42400
 800530c:	007a1200 	.word	0x007a1200

08005310 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e041      	b.n	80053a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d106      	bne.n	800533c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7fc f8e6 	bl	8001508 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3304      	adds	r3, #4
 800534c:	4619      	mov	r1, r3
 800534e:	4610      	mov	r0, r2
 8005350:	f000 fa80 	bl	8005854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
	...

080053b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d001      	beq.n	80053c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e046      	b.n	8005456 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a23      	ldr	r2, [pc, #140]	@ (8005464 <HAL_TIM_Base_Start+0xb4>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d022      	beq.n	8005420 <HAL_TIM_Base_Start+0x70>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053e2:	d01d      	beq.n	8005420 <HAL_TIM_Base_Start+0x70>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005468 <HAL_TIM_Base_Start+0xb8>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d018      	beq.n	8005420 <HAL_TIM_Base_Start+0x70>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a1e      	ldr	r2, [pc, #120]	@ (800546c <HAL_TIM_Base_Start+0xbc>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d013      	beq.n	8005420 <HAL_TIM_Base_Start+0x70>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005470 <HAL_TIM_Base_Start+0xc0>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d00e      	beq.n	8005420 <HAL_TIM_Base_Start+0x70>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a1b      	ldr	r2, [pc, #108]	@ (8005474 <HAL_TIM_Base_Start+0xc4>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d009      	beq.n	8005420 <HAL_TIM_Base_Start+0x70>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a19      	ldr	r2, [pc, #100]	@ (8005478 <HAL_TIM_Base_Start+0xc8>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d004      	beq.n	8005420 <HAL_TIM_Base_Start+0x70>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a18      	ldr	r2, [pc, #96]	@ (800547c <HAL_TIM_Base_Start+0xcc>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d111      	bne.n	8005444 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f003 0307 	and.w	r3, r3, #7
 800542a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b06      	cmp	r3, #6
 8005430:	d010      	beq.n	8005454 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f042 0201 	orr.w	r2, r2, #1
 8005440:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005442:	e007      	b.n	8005454 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f042 0201 	orr.w	r2, r2, #1
 8005452:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3714      	adds	r7, #20
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	40010000 	.word	0x40010000
 8005468:	40000400 	.word	0x40000400
 800546c:	40000800 	.word	0x40000800
 8005470:	40000c00 	.word	0x40000c00
 8005474:	40010400 	.word	0x40010400
 8005478:	40014000 	.word	0x40014000
 800547c:	40001800 	.word	0x40001800

08005480 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d020      	beq.n	80054e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d01b      	beq.n	80054e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f06f 0202 	mvn.w	r2, #2
 80054b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	f003 0303 	and.w	r3, r3, #3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f9a3 	bl	8005816 <HAL_TIM_IC_CaptureCallback>
 80054d0:	e005      	b.n	80054de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f995 	bl	8005802 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f9a6 	bl	800582a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f003 0304 	and.w	r3, r3, #4
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d020      	beq.n	8005530 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f003 0304 	and.w	r3, r3, #4
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d01b      	beq.n	8005530 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f06f 0204 	mvn.w	r2, #4
 8005500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2202      	movs	r2, #2
 8005506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f97d 	bl	8005816 <HAL_TIM_IC_CaptureCallback>
 800551c:	e005      	b.n	800552a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f96f 	bl	8005802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f980 	bl	800582a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b00      	cmp	r3, #0
 8005538:	d020      	beq.n	800557c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f003 0308 	and.w	r3, r3, #8
 8005540:	2b00      	cmp	r3, #0
 8005542:	d01b      	beq.n	800557c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f06f 0208 	mvn.w	r2, #8
 800554c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2204      	movs	r2, #4
 8005552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	f003 0303 	and.w	r3, r3, #3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f957 	bl	8005816 <HAL_TIM_IC_CaptureCallback>
 8005568:	e005      	b.n	8005576 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f949 	bl	8005802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f95a 	bl	800582a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	f003 0310 	and.w	r3, r3, #16
 8005582:	2b00      	cmp	r3, #0
 8005584:	d020      	beq.n	80055c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f003 0310 	and.w	r3, r3, #16
 800558c:	2b00      	cmp	r3, #0
 800558e:	d01b      	beq.n	80055c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f06f 0210 	mvn.w	r2, #16
 8005598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2208      	movs	r2, #8
 800559e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f931 	bl	8005816 <HAL_TIM_IC_CaptureCallback>
 80055b4:	e005      	b.n	80055c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f923 	bl	8005802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f934 	bl	800582a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00c      	beq.n	80055ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d007      	beq.n	80055ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f06f 0201 	mvn.w	r2, #1
 80055e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f901 	bl	80057ee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00c      	beq.n	8005610 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d007      	beq.n	8005610 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 faee 	bl	8005bec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00c      	beq.n	8005634 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005620:	2b00      	cmp	r3, #0
 8005622:	d007      	beq.n	8005634 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800562c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f905 	bl	800583e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f003 0320 	and.w	r3, r3, #32
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00c      	beq.n	8005658 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f003 0320 	and.w	r3, r3, #32
 8005644:	2b00      	cmp	r3, #0
 8005646:	d007      	beq.n	8005658 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f06f 0220 	mvn.w	r2, #32
 8005650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 fac0 	bl	8005bd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005658:	bf00      	nop
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800566a:	2300      	movs	r3, #0
 800566c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005674:	2b01      	cmp	r3, #1
 8005676:	d101      	bne.n	800567c <HAL_TIM_ConfigClockSource+0x1c>
 8005678:	2302      	movs	r3, #2
 800567a:	e0b4      	b.n	80057e6 <HAL_TIM_ConfigClockSource+0x186>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800569a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056b4:	d03e      	beq.n	8005734 <HAL_TIM_ConfigClockSource+0xd4>
 80056b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056ba:	f200 8087 	bhi.w	80057cc <HAL_TIM_ConfigClockSource+0x16c>
 80056be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056c2:	f000 8086 	beq.w	80057d2 <HAL_TIM_ConfigClockSource+0x172>
 80056c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056ca:	d87f      	bhi.n	80057cc <HAL_TIM_ConfigClockSource+0x16c>
 80056cc:	2b70      	cmp	r3, #112	@ 0x70
 80056ce:	d01a      	beq.n	8005706 <HAL_TIM_ConfigClockSource+0xa6>
 80056d0:	2b70      	cmp	r3, #112	@ 0x70
 80056d2:	d87b      	bhi.n	80057cc <HAL_TIM_ConfigClockSource+0x16c>
 80056d4:	2b60      	cmp	r3, #96	@ 0x60
 80056d6:	d050      	beq.n	800577a <HAL_TIM_ConfigClockSource+0x11a>
 80056d8:	2b60      	cmp	r3, #96	@ 0x60
 80056da:	d877      	bhi.n	80057cc <HAL_TIM_ConfigClockSource+0x16c>
 80056dc:	2b50      	cmp	r3, #80	@ 0x50
 80056de:	d03c      	beq.n	800575a <HAL_TIM_ConfigClockSource+0xfa>
 80056e0:	2b50      	cmp	r3, #80	@ 0x50
 80056e2:	d873      	bhi.n	80057cc <HAL_TIM_ConfigClockSource+0x16c>
 80056e4:	2b40      	cmp	r3, #64	@ 0x40
 80056e6:	d058      	beq.n	800579a <HAL_TIM_ConfigClockSource+0x13a>
 80056e8:	2b40      	cmp	r3, #64	@ 0x40
 80056ea:	d86f      	bhi.n	80057cc <HAL_TIM_ConfigClockSource+0x16c>
 80056ec:	2b30      	cmp	r3, #48	@ 0x30
 80056ee:	d064      	beq.n	80057ba <HAL_TIM_ConfigClockSource+0x15a>
 80056f0:	2b30      	cmp	r3, #48	@ 0x30
 80056f2:	d86b      	bhi.n	80057cc <HAL_TIM_ConfigClockSource+0x16c>
 80056f4:	2b20      	cmp	r3, #32
 80056f6:	d060      	beq.n	80057ba <HAL_TIM_ConfigClockSource+0x15a>
 80056f8:	2b20      	cmp	r3, #32
 80056fa:	d867      	bhi.n	80057cc <HAL_TIM_ConfigClockSource+0x16c>
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d05c      	beq.n	80057ba <HAL_TIM_ConfigClockSource+0x15a>
 8005700:	2b10      	cmp	r3, #16
 8005702:	d05a      	beq.n	80057ba <HAL_TIM_ConfigClockSource+0x15a>
 8005704:	e062      	b.n	80057cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005716:	f000 f9c3 	bl	8005aa0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005728:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	609a      	str	r2, [r3, #8]
      break;
 8005732:	e04f      	b.n	80057d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005744:	f000 f9ac 	bl	8005aa0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689a      	ldr	r2, [r3, #8]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005756:	609a      	str	r2, [r3, #8]
      break;
 8005758:	e03c      	b.n	80057d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005766:	461a      	mov	r2, r3
 8005768:	f000 f920 	bl	80059ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2150      	movs	r1, #80	@ 0x50
 8005772:	4618      	mov	r0, r3
 8005774:	f000 f979 	bl	8005a6a <TIM_ITRx_SetConfig>
      break;
 8005778:	e02c      	b.n	80057d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005786:	461a      	mov	r2, r3
 8005788:	f000 f93f 	bl	8005a0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2160      	movs	r1, #96	@ 0x60
 8005792:	4618      	mov	r0, r3
 8005794:	f000 f969 	bl	8005a6a <TIM_ITRx_SetConfig>
      break;
 8005798:	e01c      	b.n	80057d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057a6:	461a      	mov	r2, r3
 80057a8:	f000 f900 	bl	80059ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2140      	movs	r1, #64	@ 0x40
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 f959 	bl	8005a6a <TIM_ITRx_SetConfig>
      break;
 80057b8:	e00c      	b.n	80057d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4619      	mov	r1, r3
 80057c4:	4610      	mov	r0, r2
 80057c6:	f000 f950 	bl	8005a6a <TIM_ITRx_SetConfig>
      break;
 80057ca:	e003      	b.n	80057d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	73fb      	strb	r3, [r7, #15]
      break;
 80057d0:	e000      	b.n	80057d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b083      	sub	sp, #12
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80057f6:	bf00      	nop
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800581e:	bf00      	nop
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800582a:	b480      	push	{r7}
 800582c:	b083      	sub	sp, #12
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005832:	bf00      	nop
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800583e:	b480      	push	{r7}
 8005840:	b083      	sub	sp, #12
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
	...

08005854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a46      	ldr	r2, [pc, #280]	@ (8005980 <TIM_Base_SetConfig+0x12c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d013      	beq.n	8005894 <TIM_Base_SetConfig+0x40>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005872:	d00f      	beq.n	8005894 <TIM_Base_SetConfig+0x40>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a43      	ldr	r2, [pc, #268]	@ (8005984 <TIM_Base_SetConfig+0x130>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d00b      	beq.n	8005894 <TIM_Base_SetConfig+0x40>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a42      	ldr	r2, [pc, #264]	@ (8005988 <TIM_Base_SetConfig+0x134>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d007      	beq.n	8005894 <TIM_Base_SetConfig+0x40>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a41      	ldr	r2, [pc, #260]	@ (800598c <TIM_Base_SetConfig+0x138>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d003      	beq.n	8005894 <TIM_Base_SetConfig+0x40>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a40      	ldr	r2, [pc, #256]	@ (8005990 <TIM_Base_SetConfig+0x13c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d108      	bne.n	80058a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800589a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a35      	ldr	r2, [pc, #212]	@ (8005980 <TIM_Base_SetConfig+0x12c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d02b      	beq.n	8005906 <TIM_Base_SetConfig+0xb2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058b4:	d027      	beq.n	8005906 <TIM_Base_SetConfig+0xb2>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a32      	ldr	r2, [pc, #200]	@ (8005984 <TIM_Base_SetConfig+0x130>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d023      	beq.n	8005906 <TIM_Base_SetConfig+0xb2>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a31      	ldr	r2, [pc, #196]	@ (8005988 <TIM_Base_SetConfig+0x134>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d01f      	beq.n	8005906 <TIM_Base_SetConfig+0xb2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a30      	ldr	r2, [pc, #192]	@ (800598c <TIM_Base_SetConfig+0x138>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d01b      	beq.n	8005906 <TIM_Base_SetConfig+0xb2>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a2f      	ldr	r2, [pc, #188]	@ (8005990 <TIM_Base_SetConfig+0x13c>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d017      	beq.n	8005906 <TIM_Base_SetConfig+0xb2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a2e      	ldr	r2, [pc, #184]	@ (8005994 <TIM_Base_SetConfig+0x140>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d013      	beq.n	8005906 <TIM_Base_SetConfig+0xb2>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a2d      	ldr	r2, [pc, #180]	@ (8005998 <TIM_Base_SetConfig+0x144>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d00f      	beq.n	8005906 <TIM_Base_SetConfig+0xb2>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a2c      	ldr	r2, [pc, #176]	@ (800599c <TIM_Base_SetConfig+0x148>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d00b      	beq.n	8005906 <TIM_Base_SetConfig+0xb2>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a2b      	ldr	r2, [pc, #172]	@ (80059a0 <TIM_Base_SetConfig+0x14c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d007      	beq.n	8005906 <TIM_Base_SetConfig+0xb2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a2a      	ldr	r2, [pc, #168]	@ (80059a4 <TIM_Base_SetConfig+0x150>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d003      	beq.n	8005906 <TIM_Base_SetConfig+0xb2>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a29      	ldr	r2, [pc, #164]	@ (80059a8 <TIM_Base_SetConfig+0x154>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d108      	bne.n	8005918 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800590c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4313      	orrs	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a10      	ldr	r2, [pc, #64]	@ (8005980 <TIM_Base_SetConfig+0x12c>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d003      	beq.n	800594c <TIM_Base_SetConfig+0xf8>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a12      	ldr	r2, [pc, #72]	@ (8005990 <TIM_Base_SetConfig+0x13c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d103      	bne.n	8005954 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	691a      	ldr	r2, [r3, #16]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b01      	cmp	r3, #1
 8005964:	d105      	bne.n	8005972 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	f023 0201 	bic.w	r2, r3, #1
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	611a      	str	r2, [r3, #16]
  }
}
 8005972:	bf00      	nop
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	40010000 	.word	0x40010000
 8005984:	40000400 	.word	0x40000400
 8005988:	40000800 	.word	0x40000800
 800598c:	40000c00 	.word	0x40000c00
 8005990:	40010400 	.word	0x40010400
 8005994:	40014000 	.word	0x40014000
 8005998:	40014400 	.word	0x40014400
 800599c:	40014800 	.word	0x40014800
 80059a0:	40001800 	.word	0x40001800
 80059a4:	40001c00 	.word	0x40001c00
 80059a8:	40002000 	.word	0x40002000

080059ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	f023 0201 	bic.w	r2, r3, #1
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	011b      	lsls	r3, r3, #4
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	4313      	orrs	r3, r2
 80059e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f023 030a 	bic.w	r3, r3, #10
 80059e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	621a      	str	r2, [r3, #32]
}
 80059fe:	bf00      	nop
 8005a00:	371c      	adds	r7, #28
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b087      	sub	sp, #28
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	60f8      	str	r0, [r7, #12]
 8005a12:	60b9      	str	r1, [r7, #8]
 8005a14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	f023 0210 	bic.w	r2, r3, #16
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	031b      	lsls	r3, r3, #12
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005a46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	621a      	str	r2, [r3, #32]
}
 8005a5e:	bf00      	nop
 8005a60:	371c      	adds	r7, #28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b085      	sub	sp, #20
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
 8005a72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	f043 0307 	orr.w	r3, r3, #7
 8005a8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	609a      	str	r2, [r3, #8]
}
 8005a94:	bf00      	nop
 8005a96:	3714      	adds	r7, #20
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
 8005aac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005aba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	021a      	lsls	r2, r3, #8
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	609a      	str	r2, [r3, #8]
}
 8005ad4:	bf00      	nop
 8005ad6:	371c      	adds	r7, #28
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d101      	bne.n	8005af8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005af4:	2302      	movs	r3, #2
 8005af6:	e05a      	b.n	8005bae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2202      	movs	r2, #2
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a21      	ldr	r2, [pc, #132]	@ (8005bbc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d022      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b44:	d01d      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a1d      	ldr	r2, [pc, #116]	@ (8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d018      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a1b      	ldr	r2, [pc, #108]	@ (8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d013      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a1a      	ldr	r2, [pc, #104]	@ (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00e      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a18      	ldr	r2, [pc, #96]	@ (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d009      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a17      	ldr	r2, [pc, #92]	@ (8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d004      	beq.n	8005b82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a15      	ldr	r2, [pc, #84]	@ (8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d10c      	bne.n	8005b9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	40010000 	.word	0x40010000
 8005bc0:	40000400 	.word	0x40000400
 8005bc4:	40000800 	.word	0x40000800
 8005bc8:	40000c00 	.word	0x40000c00
 8005bcc:	40010400 	.word	0x40010400
 8005bd0:	40014000 	.word	0x40014000
 8005bd4:	40001800 	.word	0x40001800

08005bd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f043 0201 	orr.w	r2, r3, #1
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b083      	sub	sp, #12
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f023 0201 	bic.w	r2, r3, #1
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	3301      	adds	r3, #1
 8005c56:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c5e:	d901      	bls.n	8005c64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e01b      	b.n	8005c9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	daf2      	bge.n	8005c52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	019b      	lsls	r3, r3, #6
 8005c74:	f043 0220 	orr.w	r2, r3, #32
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c88:	d901      	bls.n	8005c8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e006      	b.n	8005c9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	f003 0320 	and.w	r3, r3, #32
 8005c96:	2b20      	cmp	r3, #32
 8005c98:	d0f0      	beq.n	8005c7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cc0:	d901      	bls.n	8005cc6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e018      	b.n	8005cf8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	daf2      	bge.n	8005cb4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2210      	movs	r2, #16
 8005cd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ce4:	d901      	bls.n	8005cea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e006      	b.n	8005cf8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	f003 0310 	and.w	r3, r3, #16
 8005cf2:	2b10      	cmp	r3, #16
 8005cf4:	d0f0      	beq.n	8005cd8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3714      	adds	r7, #20
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b08b      	sub	sp, #44	@ 0x2c
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005d1a:	88fb      	ldrh	r3, [r7, #6]
 8005d1c:	089b      	lsrs	r3, r3, #2
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005d22:	88fb      	ldrh	r3, [r7, #6]
 8005d24:	f003 0303 	and.w	r3, r3, #3
 8005d28:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	623b      	str	r3, [r7, #32]
 8005d2e:	e014      	b.n	8005d5a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3e:	3301      	adds	r3, #1
 8005d40:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d44:	3301      	adds	r3, #1
 8005d46:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d50:	3301      	adds	r3, #1
 8005d52:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	3301      	adds	r3, #1
 8005d58:	623b      	str	r3, [r7, #32]
 8005d5a:	6a3a      	ldr	r2, [r7, #32]
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d3e6      	bcc.n	8005d30 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005d62:	8bfb      	ldrh	r3, [r7, #30]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d01e      	beq.n	8005da6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d72:	461a      	mov	r2, r3
 8005d74:	f107 0310 	add.w	r3, r7, #16
 8005d78:	6812      	ldr	r2, [r2, #0]
 8005d7a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	fa22 f303 	lsr.w	r3, r2, r3
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8c:	701a      	strb	r2, [r3, #0]
      i++;
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	3301      	adds	r3, #1
 8005d92:	623b      	str	r3, [r7, #32]
      pDest++;
 8005d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d96:	3301      	adds	r3, #1
 8005d98:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005d9a:	8bfb      	ldrh	r3, [r7, #30]
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005da0:	8bfb      	ldrh	r3, [r7, #30]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1ea      	bne.n	8005d7c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	372c      	adds	r7, #44	@ 0x2c
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	4013      	ands	r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3714      	adds	r7, #20
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b085      	sub	sp, #20
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	460b      	mov	r3, r1
 8005de4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005dea:	78fb      	ldrb	r3, [r7, #3]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005dfa:	78fb      	ldrb	r3, [r7, #3]
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e0e:	68bb      	ldr	r3, [r7, #8]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	f003 0301 	and.w	r3, r3, #1
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	460b      	mov	r3, r1
 8005e42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005e56:	f023 0303 	bic.w	r3, r3, #3
 8005e5a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	78fb      	ldrb	r3, [r7, #3]
 8005e66:	f003 0303 	and.w	r3, r3, #3
 8005e6a:	68f9      	ldr	r1, [r7, #12]
 8005e6c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005e70:	4313      	orrs	r3, r2
 8005e72:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005e74:	78fb      	ldrb	r3, [r7, #3]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d107      	bne.n	8005e8a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e80:	461a      	mov	r2, r3
 8005e82:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005e86:	6053      	str	r3, [r2, #4]
 8005e88:	e00c      	b.n	8005ea4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005e8a:	78fb      	ldrb	r3, [r7, #3]
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d107      	bne.n	8005ea0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e96:	461a      	mov	r2, r3
 8005e98:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005e9c:	6053      	str	r3, [r2, #4]
 8005e9e:	e001      	b.n	8005ea4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e000      	b.n	8005ea6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b085      	sub	sp, #20
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	b29b      	uxth	r3, r3
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b089      	sub	sp, #36	@ 0x24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	460b      	mov	r3, r1
 8005ede:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005ee4:	78fb      	ldrb	r3, [r7, #3]
 8005ee6:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	0c9b      	lsrs	r3, r3, #18
 8005efc:	f003 0303 	and.w	r3, r3, #3
 8005f00:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	015a      	lsls	r2, r3, #5
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	4413      	add	r3, r2
 8005f0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	0fdb      	lsrs	r3, r3, #31
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	015a      	lsls	r2, r3, #5
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	0fdb      	lsrs	r3, r3, #31
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f003 0320 	and.w	r3, r3, #32
 8005f36:	2b20      	cmp	r3, #32
 8005f38:	d10d      	bne.n	8005f56 <USB_HC_Halt+0x82>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10a      	bne.n	8005f56 <USB_HC_Halt+0x82>
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d005      	beq.n	8005f52 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d002      	beq.n	8005f52 <USB_HC_Halt+0x7e>
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	d101      	bne.n	8005f56 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005f52:	2300      	movs	r3, #0
 8005f54:	e0d8      	b.n	8006108 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d002      	beq.n	8005f62 <USB_HC_Halt+0x8e>
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d173      	bne.n	800604a <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	015a      	lsls	r2, r3, #5
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	0151      	lsls	r1, r2, #5
 8005f74:	69fa      	ldr	r2, [r7, #28]
 8005f76:	440a      	add	r2, r1
 8005f78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f80:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f003 0320 	and.w	r3, r3, #32
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d14a      	bne.n	8006024 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f92:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d133      	bne.n	8006002 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	0151      	lsls	r1, r2, #5
 8005fac:	69fa      	ldr	r2, [r7, #28]
 8005fae:	440a      	add	r2, r1
 8005fb0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fb4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005fb8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	015a      	lsls	r2, r3, #5
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	0151      	lsls	r1, r2, #5
 8005fcc:	69fa      	ldr	r2, [r7, #28]
 8005fce:	440a      	add	r2, r1
 8005fd0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fd4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005fd8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005fe6:	d82e      	bhi.n	8006046 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ffa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ffe:	d0ec      	beq.n	8005fda <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006000:	e081      	b.n	8006106 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	4413      	add	r3, r2
 800600a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	0151      	lsls	r1, r2, #5
 8006014:	69fa      	ldr	r2, [r7, #28]
 8006016:	440a      	add	r2, r1
 8006018:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800601c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006020:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006022:	e070      	b.n	8006106 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	015a      	lsls	r2, r3, #5
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	4413      	add	r3, r2
 800602c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	0151      	lsls	r1, r2, #5
 8006036:	69fa      	ldr	r2, [r7, #28]
 8006038:	440a      	add	r2, r1
 800603a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800603e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006042:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006044:	e05f      	b.n	8006106 <USB_HC_Halt+0x232>
            break;
 8006046:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006048:	e05d      	b.n	8006106 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	015a      	lsls	r2, r3, #5
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	4413      	add	r3, r2
 8006052:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	0151      	lsls	r1, r2, #5
 800605c:	69fa      	ldr	r2, [r7, #28]
 800605e:	440a      	add	r2, r1
 8006060:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006064:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006068:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d133      	bne.n	80060e2 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	4413      	add	r3, r2
 8006082:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	0151      	lsls	r1, r2, #5
 800608c:	69fa      	ldr	r2, [r7, #28]
 800608e:	440a      	add	r2, r1
 8006090:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006094:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006098:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	015a      	lsls	r2, r3, #5
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	4413      	add	r3, r2
 80060a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	69ba      	ldr	r2, [r7, #24]
 80060aa:	0151      	lsls	r1, r2, #5
 80060ac:	69fa      	ldr	r2, [r7, #28]
 80060ae:	440a      	add	r2, r1
 80060b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060b8:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	3301      	adds	r3, #1
 80060be:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80060c6:	d81d      	bhi.n	8006104 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	015a      	lsls	r2, r3, #5
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	4413      	add	r3, r2
 80060d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060de:	d0ec      	beq.n	80060ba <USB_HC_Halt+0x1e6>
 80060e0:	e011      	b.n	8006106 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	0151      	lsls	r1, r2, #5
 80060f4:	69fa      	ldr	r2, [r7, #28]
 80060f6:	440a      	add	r2, r1
 80060f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006100:	6013      	str	r3, [r2, #0]
 8006102:	e000      	b.n	8006106 <USB_HC_Halt+0x232>
          break;
 8006104:	bf00      	nop
    }
  }

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3724      	adds	r7, #36	@ 0x24
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b088      	sub	sp, #32
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800611c:	2300      	movs	r3, #0
 800611e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006124:	2300      	movs	r3, #0
 8006126:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f7ff fd7a 	bl	8005c22 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800612e:	2110      	movs	r1, #16
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7ff fd87 	bl	8005c44 <USB_FlushTxFifo>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f7ff fdb1 	bl	8005ca8 <USB_FlushRxFifo>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006150:	2300      	movs	r3, #0
 8006152:	61bb      	str	r3, [r7, #24]
 8006154:	e01f      	b.n	8006196 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	015a      	lsls	r2, r3, #5
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	4413      	add	r3, r2
 800615e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800616c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006174:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800617c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	4413      	add	r3, r2
 8006186:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800618a:	461a      	mov	r2, r3
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	3301      	adds	r3, #1
 8006194:	61bb      	str	r3, [r7, #24]
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	2b0f      	cmp	r3, #15
 800619a:	d9dc      	bls.n	8006156 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800619c:	2300      	movs	r3, #0
 800619e:	61bb      	str	r3, [r7, #24]
 80061a0:	e034      	b.n	800620c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061b8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80061c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80061c8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061d6:	461a      	mov	r2, r3
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	3301      	adds	r3, #1
 80061e0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061e8:	d80c      	bhi.n	8006204 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006200:	d0ec      	beq.n	80061dc <USB_StopHost+0xc8>
 8006202:	e000      	b.n	8006206 <USB_StopHost+0xf2>
        break;
 8006204:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	3301      	adds	r3, #1
 800620a:	61bb      	str	r3, [r7, #24]
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	2b0f      	cmp	r3, #15
 8006210:	d9c7      	bls.n	80061a2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006218:	461a      	mov	r2, r3
 800621a:	f04f 33ff 	mov.w	r3, #4294967295
 800621e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f04f 32ff 	mov.w	r2, #4294967295
 8006226:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f7ff fce9 	bl	8005c00 <USB_EnableGlobalInt>

  return ret;
 800622e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006230:	4618      	mov	r0, r3
 8006232:	3720      	adds	r7, #32
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006246:	1c5a      	adds	r2, r3, #1
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f804 	bl	800625c <USBH_HandleSof>
}
 8006254:	bf00      	nop
 8006256:	3708      	adds	r7, #8
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b0b      	cmp	r3, #11
 800626c:	d10a      	bne.n	8006284 <USBH_HandleSof+0x28>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006274:	2b00      	cmp	r3, #0
 8006276:	d005      	beq.n	8006284 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	4798      	blx	r3
  }
}
 8006284:	bf00      	nop
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800629c:	bf00      	nop
}
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80062b8:	bf00      	nop
}
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b082      	sub	sp, #8
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f883 	bl	800641e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	791b      	ldrb	r3, [r3, #4]
 800631c:	4619      	mov	r1, r3
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f80b 	bl	800633a <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	795b      	ldrb	r3, [r3, #5]
 8006328:	4619      	mov	r1, r3
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f805 	bl	800633a <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3708      	adds	r7, #8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800633a:	b480      	push	{r7}
 800633c:	b083      	sub	sp, #12
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	460b      	mov	r3, r1
 8006344:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006346:	78fb      	ldrb	r3, [r7, #3]
 8006348:	2b0f      	cmp	r3, #15
 800634a:	d80d      	bhi.n	8006368 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800634c:	78fb      	ldrb	r3, [r7, #3]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	33e0      	adds	r3, #224	@ 0xe0
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	78fb      	ldrb	r3, [r7, #3]
 800635a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800635e:	6879      	ldr	r1, [r7, #4]
 8006360:	33e0      	adds	r3, #224	@ 0xe0
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	440b      	add	r3, r1
 8006366:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b082      	sub	sp, #8
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006384:	4618      	mov	r0, r3
 8006386:	f7ff ff57 	bl	8006238 <USBH_LL_IncTimer>
}
 800638a:	bf00      	nop
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b082      	sub	sp, #8
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7ff ff8f 	bl	80062c4 <USBH_LL_Connect>
}
 80063a6:	bf00      	nop
 80063a8:	3708      	adds	r7, #8
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b082      	sub	sp, #8
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80063bc:	4618      	mov	r0, r3
 80063be:	f7ff ff98 	bl	80062f2 <USBH_LL_Disconnect>
}
 80063c2:	bf00      	nop
 80063c4:	3708      	adds	r7, #8
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b083      	sub	sp, #12
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	460b      	mov	r3, r1
 80063d4:	70fb      	strb	r3, [r7, #3]
 80063d6:	4613      	mov	r3, r2
 80063d8:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80063da:	bf00      	nop
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b082      	sub	sp, #8
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7ff ff49 	bl	800628c <USBH_LL_PortEnabled>
}
 80063fa:	bf00      	nop
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b082      	sub	sp, #8
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8006410:	4618      	mov	r0, r3
 8006412:	f7ff ff49 	bl	80062a8 <USBH_LL_PortDisabled>
}
 8006416:	bf00      	nop
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800642a:	2300      	movs	r3, #0
 800642c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8006434:	4618      	mov	r0, r3
 8006436:	f7fc fe70 	bl	800311a <HAL_HCD_Stop>
 800643a:	4603      	mov	r3, r0
 800643c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800643e:	7bfb      	ldrb	r3, [r7, #15]
 8006440:	4618      	mov	r0, r3
 8006442:	f000 f807 	bl	8006454 <USBH_Get_USB_Status>
 8006446:	4603      	mov	r3, r0
 8006448:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800644a:	7bbb      	ldrb	r3, [r7, #14]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	4603      	mov	r3, r0
 800645c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800645e:	2300      	movs	r3, #0
 8006460:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006462:	79fb      	ldrb	r3, [r7, #7]
 8006464:	2b03      	cmp	r3, #3
 8006466:	d817      	bhi.n	8006498 <USBH_Get_USB_Status+0x44>
 8006468:	a201      	add	r2, pc, #4	@ (adr r2, 8006470 <USBH_Get_USB_Status+0x1c>)
 800646a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646e:	bf00      	nop
 8006470:	08006481 	.word	0x08006481
 8006474:	08006487 	.word	0x08006487
 8006478:	0800648d 	.word	0x0800648d
 800647c:	08006493 	.word	0x08006493
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006480:	2300      	movs	r3, #0
 8006482:	73fb      	strb	r3, [r7, #15]
    break;
 8006484:	e00b      	b.n	800649e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8006486:	2302      	movs	r3, #2
 8006488:	73fb      	strb	r3, [r7, #15]
    break;
 800648a:	e008      	b.n	800649e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800648c:	2301      	movs	r3, #1
 800648e:	73fb      	strb	r3, [r7, #15]
    break;
 8006490:	e005      	b.n	800649e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006492:	2302      	movs	r3, #2
 8006494:	73fb      	strb	r3, [r7, #15]
    break;
 8006496:	e002      	b.n	800649e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006498:	2302      	movs	r3, #2
 800649a:	73fb      	strb	r3, [r7, #15]
    break;
 800649c:	bf00      	nop
  }
  return usb_status;
 800649e:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3714      	adds	r7, #20
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <memset>:
 80064ac:	4402      	add	r2, r0
 80064ae:	4603      	mov	r3, r0
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d100      	bne.n	80064b6 <memset+0xa>
 80064b4:	4770      	bx	lr
 80064b6:	f803 1b01 	strb.w	r1, [r3], #1
 80064ba:	e7f9      	b.n	80064b0 <memset+0x4>

080064bc <__libc_init_array>:
 80064bc:	b570      	push	{r4, r5, r6, lr}
 80064be:	4d0d      	ldr	r5, [pc, #52]	@ (80064f4 <__libc_init_array+0x38>)
 80064c0:	4c0d      	ldr	r4, [pc, #52]	@ (80064f8 <__libc_init_array+0x3c>)
 80064c2:	1b64      	subs	r4, r4, r5
 80064c4:	10a4      	asrs	r4, r4, #2
 80064c6:	2600      	movs	r6, #0
 80064c8:	42a6      	cmp	r6, r4
 80064ca:	d109      	bne.n	80064e0 <__libc_init_array+0x24>
 80064cc:	4d0b      	ldr	r5, [pc, #44]	@ (80064fc <__libc_init_array+0x40>)
 80064ce:	4c0c      	ldr	r4, [pc, #48]	@ (8006500 <__libc_init_array+0x44>)
 80064d0:	f000 f818 	bl	8006504 <_init>
 80064d4:	1b64      	subs	r4, r4, r5
 80064d6:	10a4      	asrs	r4, r4, #2
 80064d8:	2600      	movs	r6, #0
 80064da:	42a6      	cmp	r6, r4
 80064dc:	d105      	bne.n	80064ea <__libc_init_array+0x2e>
 80064de:	bd70      	pop	{r4, r5, r6, pc}
 80064e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80064e4:	4798      	blx	r3
 80064e6:	3601      	adds	r6, #1
 80064e8:	e7ee      	b.n	80064c8 <__libc_init_array+0xc>
 80064ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ee:	4798      	blx	r3
 80064f0:	3601      	adds	r6, #1
 80064f2:	e7f2      	b.n	80064da <__libc_init_array+0x1e>
 80064f4:	08006598 	.word	0x08006598
 80064f8:	08006598 	.word	0x08006598
 80064fc:	08006598 	.word	0x08006598
 8006500:	0800659c 	.word	0x0800659c

08006504 <_init>:
 8006504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006506:	bf00      	nop
 8006508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800650a:	bc08      	pop	{r3}
 800650c:	469e      	mov	lr, r3
 800650e:	4770      	bx	lr

08006510 <_fini>:
 8006510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006512:	bf00      	nop
 8006514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006516:	bc08      	pop	{r3}
 8006518:	469e      	mov	lr, r3
 800651a:	4770      	bx	lr
